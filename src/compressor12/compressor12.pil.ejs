constant %N = 2**<%- nBits %>;

namespace Global(%N);
    pol constant L1;
<% for (let i=12; i<nPublics; i+=12) { -%>
    pol constant L<%- Math.floor(i/12) +1 %>;
<% } -%>

namespace Compressor(%N);
    pol constant S[12];
    // POSEIDON
    pol constant C[12];
    pol constant PARTIAL;
    pol constant POSEIDON;
    pol constant GATE;
    pol constant CMULADD;
    pol constant POLEV;
    pol constant FFT;
    pol commit a[12];

<% for (let i=0; i<nPublics; i++) { -%>
    public pub<%- i%> = a[<%- i%12%>](<%- Math.floor(i/12) %>);
<% } -%>
<% for (let i=0; i<nPublics; i++) { -%>
    Global.L<%- Math.floor(i/12)+1 %> * (a[<%- i%12 %>] - :pub<%- i %>) = 0;
<% } -%>

// Normal plonk gates

    // C[0] -> Ql_01
    // C[1] -> Qr_01
    // C[2] -> Qo_01
    // C[3] -> Qm_01
    // C[4] -> Qk_01
    // C[6] -> Ql_23
    // C[7] -> Qr_23
    // C[8] -> Qo_23
    // C[9] -> Qm_23
    // C[10]-> Qc_23

    pol a01 = a[0]*a[1];
    pol g012 = C[3]*a01 + C[0]*a[0] + C[1]*a[1] + C[2]*a[2] + C[4] = 0;
    g012*GATE = 0;

    pol a34 = a[3]*a[4];
    pol g345 = C[3]*a34 + C[0]*a[3] + C[1]*a[4] + C[2]*a[5] + C[4] = 0;
    g345*GATE = 0;

    pol a67 = a[6]*a[7];
    pol g678 = C[9]*a67 + C[6]*a[6] + C[7]*a[7] + C[8]*a[8] + C[10] = 0;
    g678*GATE = 0;

    pol a910 = a[9]*a[10];
    pol g91011 = C[9]*a910 + C[6]*a[9] + C[7]*a[10] + C[8]*a[11] + C[10] = 0;
    g91011*GATE = 0;


// POSEIDON GATE

<% for (let i=0; i<12; i++) { -%>
    pol a<%- i %>_1 = a[<%- i %>] +  C[<%- i %>];
    pol a<%- i %>_2 = a<%- i %>_1 * a<%- i %>_1;
    pol a<%- i %>_4 = a<%- i %>_2 * a<%- i %>_2;
    pol a<%- i %>_6 = a<%- i %>_4 * a<%- i %>_2;
    pol a<%- i %>_7 = a<%- i %>_5 * a[<%- i %>];
    pol a<%- i %>_R = PARTIAL * (a<%- i %>_1 - a<%- i %>_7) + a<%- i %>_7;
<% } -%>

    POSEIDON * (a[ 0]' - (25*a0_R + 15*a1_R + 41*a2_R + 16*a3_R +  2*a4_R + 28*a5_R + 13*a6_R + 13*a7_R + 39*a8_R + 18*a9_R + 34*a10_R + 20*a11_R)) = 0;
    POSEIDON * (a[ 1]' - (20*a0_R + 17*a1_R + 15*a2_R + 41*a3_R + 16*a4_R +  2*a5_R + 28*a6_R + 13*a7_R + 13*a8_R + 39*a9_R + 18*a10_R + 34*a11_R)) = 0;
    POSEIDON * (a[ 2]' - (34*a0_R + 20*a1_R + 17*a2_R + 15*a3_R + 41*a4_R + 16*a5_R +  2*a6_R + 28*a7_R + 13*a8_R + 13*a9_R + 39*a10_R + 18*a11_R)) = 0;
    POSEIDON * (a[ 3]' - (18*a0_R + 34*a1_R + 20*a2_R + 17*a3_R + 15*a4_R + 41*a5_R + 16*a6_R +  2*a7_R + 28*a8_R + 13*a9_R + 13*a10_R + 39*a11_R)) = 0;
    POSEIDON * (a[ 4]' - (39*a0_R + 18*a1_R + 34*a2_R + 20*a3_R + 17*a4_R + 15*a5_R + 41*a6_R + 16*a7_R +  2*a8_R + 28*a9_R + 13*a10_R + 13*a11_R)) = 0;
    POSEIDON * (a[ 5]' - (13*a0_R + 39*a1_R + 18*a2_R + 34*a3_R + 20*a4_R + 17*a5_R + 15*a6_R + 41*a7_R + 16*a8_R +  2*a9_R + 28*a10_R + 13*a11_R)) = 0;
    POSEIDON * (a[ 6]' - (13*a0_R + 13*a1_R + 39*a2_R + 18*a3_R + 34*a4_R + 20*a5_R + 17*a6_R + 15*a7_R + 41*a8_R + 16*a9_R +  2*a10_R + 28*a11_R)) = 0;
    POSEIDON * (a[ 7]' - (28*a0_R + 13*a1_R + 13*a2_R + 39*a3_R + 18*a4_R + 34*a5_R + 20*a6_R + 17*a7_R + 15*a8_R + 41*a9_R + 16*a10_R +  2*a11_R)) = 0;
    POSEIDON * (a[ 8]' - ( 2*a0_R + 28*a1_R + 13*a2_R + 13*a3_R + 39*a4_R + 18*a5_R + 34*a6_R + 20*a7_R + 17*a8_R + 15*a9_R + 41*a10_R + 16*a11_R)) = 0;
    POSEIDON * (a[ 9]' - (16*a0_R +  2*a1_R + 28*a2_R + 13*a3_R + 13*a4_R + 39*a5_R + 18*a6_R + 34*a7_R + 20*a8_R + 17*a9_R + 15*a10_R + 41*a11_R)) = 0;
    POSEIDON * (a[10]' - (41*a0_R + 16*a1_R +  2*a2_R + 28*a3_R + 13*a4_R + 13*a5_R + 39*a6_R + 18*a7_R + 34*a8_R + 20*a9_R + 17*a10_R + 15*a11_R)) = 0;
    POSEIDON * (a[11]' - (15*a0_R + 41*a1_R + 16*a2_R +  2*a3_R + 28*a4_R + 13*a5_R + 13*a6_R + 39*a7_R + 18*a8_R + 34*a9_R + 20*a10_R + 17*a11_R)) = 0;

// CMULADD GATE

//  C[9]  * ( [a[0],a[1],a[2]] + [C[0],C[1],C[2]] ) *
//          ( [a[3],a[4],a[5]] + [C[3],C[4],C[5]] ) +
//  C[10] * ( [a[6],a[7],a[8]] + [C[6],C[7],C[8]] ) =
//  [ a[9], a[10], a[11]]

    pol ca0 = (a[0] + C[0])*C[9];
    pol ca1 = (a[1] + C[1])*C[9];
    pol ca2 = (a[2] + C[2])*C[9];
    pol ca3 = a[3] + C[3];
    pol ca4 = a[4] + C[4];
    pol ca5 = a[5] + C[5];
    pol ca6 = (a[6] * C[6])*C[10];
    pol ca7 = (a[7] * C[7])*C[10];
    pol ca8 = (a[8] * C[8])*C[10];
    pol ca9 = a[9];
    pol ca10 = a[10];
    pol ca11 = a[11];

    pol cA = (ca0 + ca1)  * (ca3 + ca4);
    pol cB = (ca0 + ca2)  * (ca3 + ca5);
    pol cC = (ca1 + ca2)  * (ca4 + ca5);
    pol cD = ca0*ca3;
    pol cE = ca1*ca4;
    pol cF = ca2*ca5;

    CMULADD * (ca9 - (cC + cD - cE - cF) - ca6) = 0;
    CMULADD * (ca10 - (cA + cC - 2*cE - cD) - ca7) = 0;
    CMULADD * (ca11 - (cB - cD + cE) - ca8) = 0;

// FFT

    pol g0 = C[0]*a[0] + C[1]*a[3] + C[2]*a[6] + C[3]*a[9]  + C[6]*a[0] + C[7]*a[3];
    pol g1 = C[0]*a[1] + C[1]*a[4] + C[2]*a[7] + C[3]*a[10] + C[6]*a[1] + C[7]*a[4];
    pol g2 = C[0]*a[2] + C[1]*a[5] + C[2]*a[8] + C[3]*a[11] + C[6]*a[2] + C[7]*a[5];

    pol g6 = C[0]*a[0] - C[1]*a[3] + C[4]*a[6] - C[5]*a[9]  + C[6]*a[0] - C[7]*a[3];
    pol g7 = C[0]*a[1] - C[1]*a[4] + C[4]*a[7] - C[5]*a[10] + C[6]*a[1] - C[7]*a[4];
    pol g8 = C[0]*a[2] - C[1]*a[5] + C[4]*a[8] - C[5]*a[11] + C[6]*a[2] - C[7]*a[5];

    pol g3 = C[0]*a[0] + C[1]*a[3] - C[2]*a[6] - C[3]*a[9]  + C[6]*a[0] + C[8]*a[3];
    pol g4 = C[0]*a[1] + C[1]*a[4] - C[2]*a[7] - C[3]*a[10] + C[6]*a[1] + C[8]*a[4];
    pol g5 = C[0]*a[2] + C[1]*a[5] - C[2]*a[8] - C[3]*a[11] + C[6]*a[2] + C[8]*a[5];

    pol g9  = C[0]*a[0] - C[1]*a[3] - C[4]*a[6] + C[5]*a[9]  + C[6]*a[0] - C[8]*a[3];
    pol g10 = C[0]*a[1] - C[1]*a[4] - C[4]*a[7] + C[5]*a[10] + C[6]*a[1] - C[8]*a[4];
    pol g11 = C[0]*a[2] - C[1]*a[5] - C[4]*a[8] + C[5]*a[11] + C[6]*a[2] - C[8]*a[5];

    FFT * (a[0]' - g0) = 0;
    FFT * (a[1]' - g1) = 0;
    FFT * (a[2]' - g2) = 0;
    FFT * (a[3]' - g3) = 0;
    FFT * (a[4]' - g4) = 0;
    FFT * (a[5]' - g5) = 0;
    FFT * (a[6]' - g6) = 0;
    FFT * (a[7]' - g7) = 0;
    FFT * (a[8]' - g8) = 0;
    FFT * (a[9]' - g9) = 0;
    FFT * (a[10]' - g10) = 0;
    FFT * (a[11]' - g11) = 0;

// POLEV

<% function CMulAdd(r0, r1, r2, a0, a1, a2, b0, b1, b2, c0, c1, c2) {
    const code = [];
    code.push('   pol ${r0}_A = (${a0} + ${a1})  * (${b0} + ${b1});');
    code.push('   pol ${r0}_B = (${a0} + ${a2})  * (${b0} + ${b2});');
    code.push('   pol ${r0}_C = (${a1} + ${a2})  * (${b1} + ${b2});');
    code.push('   pol ${r0}_D = (${a0} * ${b0});
    code.push('   pol ${r0}_E = (${a1} * ${b1});
    code.push('   pol ${r0}_F = (${a2} * ${b2});
    code.push('   pol ${r0} = ${r0}_C + ${r0}_D - ${r0}_E - ${r0}_F + ${c0};
    code.push('   pol ${r1} = ${r0}_A + ${r0}_C - 2*${r0}_E - ${r0}_D + ${c1};
    code.push('   pol ${r2} = ${r0}_B - ${r0}_D + ${r0}_E + ${c2};
    return code.join("\n");
} -%>

<%- CMulAdd("acc1_0", "acc1_1", "acc1_2", "a[0]'", "a[1]'", "a[2]'", "a[3]'", "a[4]'", "a[5]'", "a[9]", "a[10]", "a[11]") -%>
<%- CMulAdd("acc2_0", "acc2_1", "acc2_2", "acc1_0", "acc1_1", "acc1_2", "a[3]'", "a[4]'", "a[5]'", "a[6]", "a[7]", "a[8]") -%>
<%- CMulAdd("acc3_0", "acc3_1", "acc3_2", "acc2_0", "acc2_1", "acc2_2", "a[3]'", "a[4]'", "a[5]'", "a[3]", "a[4]", "a[5]") -%>
<%- CMulAdd("acc4_0", "acc4_1", "acc4_2", "acc3_0", "acc3_1", "acc3_2", "a[3]'", "a[4]'", "a[5]'", "a[0]", "a[1]", "a[2]") -%>

POLEV * (a[6]' - acc4_0 ) = 0;
POLEV * (a[7]' - acc4_1 ) = 0;
POLEV * (a[8]' - acc4_2 ) = 0;


// Connection equations
    {a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]} connect
        {S[0], S[1], S[2], S[3], S[4], S[5], S[6], S[7], S[8], S[9], S[10], S[11]};
