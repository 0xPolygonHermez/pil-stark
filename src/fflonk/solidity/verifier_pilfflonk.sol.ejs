// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

<% function unrollCode(code) { -%>
<%  const copyObject = {}; -%>
<%  const idMap = {}; -%>
<%  let tmpCount = 0; -%>
<%  function ref(r, dest) { 
        if(r.type == "tmp") {
            if(copyObject[r.id]) return copyObject[r.id];
            if(!idMap[r.id] && dest) idMap[r.id] = tmpCount++; 
            let t = idMap[r.id] === 0 ? "mIn" : `add(mIn, ${idMap[r.id]*32})`;
            if(!dest) t = "mload(" + t + ")";
            return t;
        } else if (r.type === "eval") {
            return "calldataload(pEval_" + evNames[r.id] + ")";
        } else if (r.type === "number") {
            return r.value;
        } else if (r.type === "public") {
            return `calldataload(add(pPublic,${r.id*32}))`;
        } else if (r.type === "challenge") {
            if(r.id === 0) {
                return "challengeAlpha";
            } else if(r.id === 1) {         
                return "challengeBeta";
            } else if(r.id === 2) {         
                return "challengeGamma";
            } else if(r.id === 3) {         
                return "challengeDelta";
            } else if(r.id === 4) {         
                return "challengeA";
            } else {
                throw new Error("Invalid Challenge: " +r.id);
            }
        } else if (r.type === "x") {
            return "challengeXi";
        } else {
            throw new Error("Invalid Ref: " +r.type);
        }
    } -%>

<%  const codeCopy = code.filter(c => c.op === "copy"); -%>
<%  const codeNoCopy = code.filter(c => c.op !== "copy"); -%>
<%  for(let i=0; i<codeCopy.length; i++) { -%>
<%      let inst = codeCopy[i]; -%>
<%      copyObject[inst.dest.id] = ref(inst.src[0]); -%>
<%  } -%>

<%  function getDestRef(i) {
    let dest = i === codeNoCopy.length - 1 
        || (codeNoCopy[i+1].src[0] && JSON.stringify(codeNoCopy[i+1].src[0]) === JSON.stringify(codeNoCopy[i].dest)) 
        || (codeNoCopy[i+1].src[1] && JSON.stringify(codeNoCopy[i+1].src[1]) === JSON.stringify(codeNoCopy[i].dest)) 
        || (codeNoCopy[i+1].src[2] && JSON.stringify(codeNoCopy[i+1].src[2]) === JSON.stringify(codeNoCopy[i].dest))  
            ? "tmp"
            : i === codeNoCopy.length - 2 
            || (codeNoCopy[i+2].src[0] && JSON.stringify(codeNoCopy[i+2].src[0]) === JSON.stringify(codeNoCopy[i].dest)) 
            || (codeNoCopy[i+2].src[1] && JSON.stringify(codeNoCopy[i+2].src[1]) === JSON.stringify(codeNoCopy[i].dest)) 
            || (codeNoCopy[i+2].src[2] && JSON.stringify(codeNoCopy[i+2].src[2]) === JSON.stringify(codeNoCopy[i].dest)) 
                ? "tmp2" 
                : ref(codeNoCopy[i].dest, true); 
    return dest;
} -%>

<%  function getSrcRef(i, index) {
    let src = i > 0 && JSON.stringify(codeNoCopy[i-1].dest) === JSON.stringify(codeNoCopy[i].src[index]) 
        ? "tmp" 
        : i > 1 && JSON.stringify(codeNoCopy[i-2].dest) === JSON.stringify(codeNoCopy[i].src[index])
            ? "tmp2"   
            : ref(codeNoCopy[i].src[index]); 
    return src;
} -%>

<%  for(let i=0; i<codeNoCopy.length; i++) { -%>
<%      let inst = codeNoCopy[i]; -%>
<%      if(inst.op === "add") { -%>
<%      let nextIndex = i+1; -%>
<%      let dest = getDestRef(i); -%>
<%      let src0 = getSrcRef(i, 0); -%>
<%      let src1 = getSrcRef(i, 1); -%>
<%      if(["tmp", "tmp2"].includes(dest)) { -%>
                <%- dest %> := addmod(<%- src0 %>,<%-src1 %>, q)
<%      } else { -%>
                mstore(<%- dest %>, addmod(<%- src0 %>,<%-src1 %>, q))
<%      } -%>
<%      } else if (inst.op === "sub") { -%>
<%      let dest = getDestRef(i); -%>
<%      let src0 = getSrcRef(i, 0); -%>
<%      let src1 = getSrcRef(i, 1); -%>
<%      if(["tmp", "tmp2"].includes(dest)) { -%>
                <%- dest %> := mod(add(sub(<%-src0 %>, <%-src1 %>), q), q)
<%      } else { -%>
                mstore(<%-dest %>, mod(add(sub(<%-src0 %>, <%-src1 %>), q), q))
<%      } -%>
<%      } else if (inst.op === "mul") { -%>
<%      let dest = getDestRef(i); -%>
<%      let src0 = getSrcRef(i, 0); -%>
<%      let src1 = getSrcRef(i, 1); -%>
<%      if(["tmp", "tmp2"].includes(dest)) { -%>
                <%- dest %> := mulmod(<%-src0 %>,<%- src1 %>, q)
<%      } else { -%>
                mstore(<%- dest %>, mulmod(<%-src0 %>,<%- src1 %>, q))
<%      } -%>
<%      } else if (inst.op === "muladd") { -%>
<%      let dest = getDestRef(i); -%>
<%      let src0 = getSrcRef(i, 0); -%>
<%      let src1 = getSrcRef(i, 1); -%>
<%      let src2 = getSrcRef(i, 2); -%>
<%      if(["tmp", "tmp2"].includes(dest)) { -%>
                <%- dest %> := addmod(mulmod(<%-src0 %>,<%-src1 %>, q),<%- src2 %>, q)
<%      } else { -%>
                mstore(<%- dest %>, addmod(mulmod(<%-src0 %>,<%-src1 %>, q),<%- src2 %>, q))
<%      } -%>
<%      } else throw new Error("Invalid op: " + inst.op); -%>
<%  } -%>
<% if(vk.maxQDegree == 0) { -%>
                mstore(add(pMem, pQ), mulmod(tmp, calldataload(pEval_invZh), q))
<%  } else { -%>
                let Q := mulmod(tmp, calldataload(pEval_invZh), q)
<%  } -%>
<%  } -%>


contract PilFflonkVerifier {
    uint32 constant n     = <%= 2**vk.power %>; // Domain size

    // Scalar field size
    uint256 constant q    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // Base field size
    uint256 constant qf   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

<%  for(let i = 0; i < constantCommits.length; ++i) { -%>
    uint256 constant f<%- constantCommits[i].index %>x = <%= constantCommits[i].commit[0] %>;
    uint256 constant f<%- constantCommits[i].index %>y = <%= constantCommits[i].commit[1] %>;
<%  } -%>

    // ShPlonk contract address
    address public immutable shPlonkAddress;

    // bytes4(keccak256(bytes("<%- signatureStr %>")));
    bytes4 private constant _VERIFY_COMMITMENTS_SIGNATURE = <%- signatureBytes %>;

    // Commits calldata
    // Byte offset of every parameter in the calldata

    // Polynomial commitments fi
<%  let count = 128; // This is 128 because first two values are W and Wp -%>
<%  for(let i = 0; i < vk.f.length; ++i) { -%>
<%      if(vk.f[i].stages[0].stage !== 0) { -%>
    uint16 constant pf<%- vk.f[i].index %> = 4 + <%- count %>;
<%      count += 64 -%>
<%      } -%>
<%  } -%>
    // Opening evaluations
<%  for(let i = 0; i < orderedEvals.length; ++i) { -%>
    uint16 constant pEval_<%- orderedEvals[i] %> = 4 + <%- count %>;
<% count += 32 -%>
<%  } -%>

    // Memory data
    // Challenges
<%  let challengeCount = 0; -%>
<%  if(fflonkInfo.mapSectionsN.cm2_n > 0 || fflonkInfo.peCtx.length > 0) { -%> 
    uint16 constant pAlpha  = <%- challengeCount %>;
    uint16 constant pBeta   = <%- challengeCount + 32 %>;
<%  challengeCount += 64; -%>
<% } -%>
   
<%  if(fflonkInfo.mapSectionsN.cm3_n > 0) { -%> 
    uint16 constant pGamma  = <%- challengeCount %>;
    uint16 constant pDelta   = <%- challengeCount + 32 %>;
<%  challengeCount += 64; -%>
<% } -%>
    uint16 constant pA      = <%- challengeCount %>;
    uint16 constant pXiSeed = <%- challengeCount + 32 %>;
    uint16 constant pXi = <%- challengeCount + 64 %>;
<% challengeCount += 96; -%>

<% if(vk.maxQDegree > 0) { -%>
    uint16 constant pXiN = <%- challengeCount %>;
<% challengeCount += 32; -%>
<% } else { -%>
    // Quotient polynomial
    uint16 constant pQ  = <%- challengeCount %>;
<% } -%>

<%  let pLastMem = challengeCount + 32 -%>
    uint16 constant pLastMem = <%- pLastMem %>;

    constructor(address _shPlonkAddress) {
        shPlonkAddress = _shPlonkAddress;
    }

<%  let nBytesCommits = (vk.f.filter(fi => fi.stages[0].stage !== 0).length + 2) * 2 + orderedEvals.length -%>

<%  if (vk.nPublics > 0) { -%>
    function verifyProof(bytes32[<%- nBytesCommits %>] calldata proof, uint256[<%- Math.max(vk.nPublics, 1) %>] calldata pubSignals) public view returns (bool) {
<%  } else { -%>
    function verifyProof(bytes32[<%- nBytesCommits %>] calldata proof) public view returns (bool) {
<%  } -%>
        address shPlonkAddr = shPlonkAddress;
        bytes4 shPlonkSelector = _VERIFY_COMMITMENTS_SIGNATURE;
        assembly {
<%  if (vk.nPublics > 0) { -%>
            function computeChallenges(pMem, pPublic) { 
<%  } else { -%>
            function computeChallenges(pMem) {
<%  } -%>
                let mIn := mload(0x40)

<%  let memC = pLastMem; -%>
<%  for(let i = 0; i < vk.f.length; ++i) { -%>
<%  if(vk.f[i].stages[0].stage === 0) { -%>
                mstore(add(pMem, <%= memC %>), f<%- vk.f[i].index %>x)
                mstore(add(pMem, <%= memC + 32 %>), f<%- vk.f[i].index %>y)
<%  memC += 64 -%>
<%  } -%>
<%  } -%>
<%  if (vk.nPublics > 0) { -%>
                mstore(add(pMem, <%= memC %>), calldataload(pPublic))
<%  memC += 32 -%>
<%  for (let i=1; i<vk.nPublics;i++) { %>
                mstore(add(pMem, <%= memC %> ), calldataload(add(pPublic, <%= i * 32 %>)))
<%  memC += 32 -%>
<%  }  %>  
<%  } -%>
<%  for(let i = 0; i < vk.f.length; ++i) { -%>
<%  if(vk.f[i].stages[0].stage === 1) { -%>
                mstore(add(pMem, <%= memC %>), calldataload(pf<%- vk.f[i].index %>))
                mstore(add(pMem, <%= memC + 32 %>), calldataload(add(pf<%- vk.f[i].index %>, 32)))
<%  memC += 64 -%>
<%  } -%>
<%  } -%>

<%  if(fflonkInfo.mapSectionsN.cm2_n > 0 || fflonkInfo.peCtx.length > 0) { -%>
                // Compute challenge.alpha
                mstore(add(pMem, pAlpha),  mod(keccak256(add(pMem, pLastMem), <%= memC - pLastMem %>), q))

                // Compute challenge.beta
                mstore(add(pMem, pBeta), mod(keccak256(add(pMem, pAlpha), 32), q))
<%  memC = pLastMem; -%>

                mstore(add(pMem, <%= memC %>), mload(add(pMem, pBeta)))
<%  memC += 32 -%>
<%  } -%>

<%  for(let i = 0; i < vk.f.length; ++i) { -%>
<%  if(vk.f[i].stages[0].stage === 2) { -%>
                mstore(add(pMem, <%= memC %>), calldataload(pf<%- vk.f[i].index %>))
                mstore(add(pMem, <%= memC + 32 %>), calldataload(add(pf<%- vk.f[i].index %>, 32)))
<%  memC += 64 -%>
<%  } -%>
<%  } -%>
                
<%  if(fflonkInfo.mapSectionsN.cm3_n > 0) { -%>
                // Compute challenge.gamma
                mstore(add(pMem, pGamma),  mod(keccak256(add(pMem, pLastMem), <%= memC - pLastMem %>), q))

                // Compute challenge.delta
                mstore(add(pMem, pDelta), mod(keccak256(add(pMem, pGamma), 32), q))
<%  memC = pLastMem; -%>

                mstore(add(pMem, <%= memC %>), mload(add(pMem, pDelta)))
<%  memC += 32 -%>
<%  } -%>

<%  for(let i = 0; i < vk.f.length; ++i) { -%>
<%  if(vk.f[i].stages[0].stage === 3) { -%>
                mstore(add(pMem, <%= memC %>), calldataload(pf<%- vk.f[i].index %>))
                mstore(add(pMem, <%= memC + 32 %>), calldataload(add(pf<%- vk.f[i].index %>, 32)))
<%  memC += 64 -%>
<%  } -%>
<%  } -%>
                // Compute challenge.a
                mstore(add(pMem, pA),  mod(keccak256(add(pMem, pLastMem), <%= memC - pLastMem %>), q))

                // Compute xiSeed
<%  memC = pLastMem; -%>
                mstore(add(pMem, pLastMem), mload(add(pMem, pA)))
<%  memC += 32; -%>
<%  for(let i = 0; i < vk.f.length; ++i) { -%>
<%  if(vk.f[i].stages[0].stage === 4) { -%>
                mstore(add(pMem, <%= memC %>), calldataload(pf<%- vk.f[i].index %>))
                mstore(add(pMem, <%= memC + 32 %>), calldataload(add(pf<%- vk.f[i].index %>, 32)))
<%  memC += 64 -%>
<%  } -%>
<%  } -%>
                let xiSeed := mod(keccak256(add(pMem, pLastMem), <%- 32 + vk.f.filter(fi => fi.stages[0].stage === 4).length * 64  %>), q)
                mstore(add(pMem, pXiSeed), xiSeed)
                                
                // Compute xin
                let xin := 1
                let h := xiSeed
<%  let binaryPowerW = Number(vk.powerW).toString(2).split('').reverse().join(''); -%>
<%  for ( let i = 0; i < binaryPowerW.length; i++) { -%>
<%  if(binaryPowerW[i] === '1') { -%>
                xin := mulmod(xin, h, q)
<%  }   -%>
                h := mulmod(h, h, q)
<%  }   -%>

                // Store challenge xi
                mstore(add(pMem, pXi), xin)

                // Compute xi^n
<%  for ( let i = 0; i < vk.power; i++) { -%>
                xin:= mulmod(xin, xin, q)
<%  } -%>

<%  if(vk.maxQDegree > 0) { -%>
                mstore(add(pMem, pXiN), xin)
<%  } -%>

                let zh := mod(add(sub(xin, 1), q), q)

                // Check that eval zh inv is correct
                if iszero(eq(1, mulmod(zh, calldataload(pEval_invZh), q))) {
                    mstore(0, 0)
                    return(0,0x20)
                }
            }

            function checkField(v) {
                if iszero(lt(v, q)) {
                    mstore(0, 0)
                    return(0,0x20)
                }
            }

            function checkPointBelongsToBN128Curve(p) {
                let x := calldataload(p)
                let y := calldataload(add(p, 32))

                // Check that the point is on the curve
                // y^2 = x^3 + 3
                let x3_3 := addmod(mulmod(x, mulmod(x, x, qf), qf), 3, qf)
                let y2 := mulmod(y, y, qf)

                if iszero(eq(x3_3, y2)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }  
            
            
            // Validate all the evaluations sent by the prover ∈ F
            function checkInput() {        
                // Check commitments fullfill bn128 curve equation Y^2 = X^3 + 3
<% for(let i = 0; i < vk.f.length; ++i) { -%>
<%      if(vk.f[i].stages[0].stage !== 0) { -%>
                checkPointBelongsToBN128Curve(pf<%- vk.f[i].index %>)
<% } -%>
<% } -%>

<% for(let i = 0; i < orderedEvals.length; ++i) { -%>
                checkField(calldataload(pEval_<%- orderedEvals[i] %>))
<% } -%>
            }

<%  if (vk.nPublics > 0) { -%>
            function computeQ(pMem, pPublic) {
<%  } else { -%>
            function computeQ(pMem) {
<%  } -%>    
            
                let mIn := mload(0x40)
                let tmp
                let tmp2

<%  if (fflonkInfo.mapSectionsN.cm2_n > 0 || fflonkInfo.peCtx.length > 0) { -%>
                let challengeAlpha := mload(add(pMem, pAlpha))
                let challengeBeta := mload(add(pMem, pBeta))
<%  } -%>  
<%  if (fflonkInfo.mapSectionsN.cm3_n > 0) { -%>
                let challengeGamma := mload(add(pMem, pGamma))
                let challengeDelta := mload(add(pMem, pDelta))
<%  } -%>  
                let challengeA := mload(add(pMem, pA))
                let challengeXi := mload(add(pMem, pXi))
<%  if(vk.maxQDegree > 0) { -%>
                let challengeXiN := mload(add(pMem, pXiN))
<% } -%>
                
<% unrollCode(fflonkInfo.verifierCode.first); -%>

<%  if(vk.maxQDegree > 0) { -%>
                tmp := 0
                let xAcc := 1
<%  const nPolsQ = vk.f.filter(fi => fi.stages[0].stage === 4).map(fi => fi.pols).flat(Infinity).length; -%>
<%  for(let i = 0; i < nPolsQ; ++i) { -%>
                tmp := addmod(tmp, mulmod(calldataload(pEval_Q<%- i %>), xAcc, q), q)
<%  if(i < nPolsQ - 1) { -%>
<%  for(let j = 0; j < vk.maxQDegree; ++j) { -%>
                xAcc := mulmod(xAcc, challengeXiN, q)
<% } -%>
<% } -%>
<% } -%>

                // Check that Q and tmp are equal
                if iszero(eq(tmp, Q)) {
                    mstore(0, 0)
                    return(0,0x20)
                }
<% } -%>
            }
            
            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations ∈ F
            checkInput()
           
            // Compute the challenges
<%  if (vk.nPublics > 0) { -%>
            computeChallenges(pMem, pubSignals)
<%  } else { -%>
            computeChallenges(pMem)
<%  } -%>   

            // Compute q
<%  if (vk.nPublics > 0) { -%>
            computeQ(pMem, pubSignals)
<%  } else { -%>
            computeQ(pMem)
<%  } -%>               
            // Call shPlonk contract 
            mstore(add(pMem, pLastMem),shPlonkSelector)
            calldatacopy(add(pMem, add(pLastMem, 0x04)),0x04, <%- (nBytesCommits - 1) * 32 %>)
            mstore(add(pMem, add(pLastMem, <%- (nBytesCommits - 1) * 32 + 4 %>)), mload(add(pMem, pXiSeed)))
<%  if (vk.maxQDegree === 0) { -%>
            mstore(add(pMem, add(pLastMem, <%- (nBytesCommits - 1) * 32 + 4 + 32 %>)), mload(add(pMem, pQ)))
            let success := staticcall(gas(), shPlonkAddr, add(pMem, pLastMem), <%- (nBytesCommits - 1) * 32 + 4 + 64 %>, add(pMem, pLastMem), 32)
<%  } else { -%> 
            let success := staticcall(gas(), shPlonkAddr, add(pMem, pLastMem), <%- (nBytesCommits - 1) * 32 + 4 + 32 %>, add(pMem, pLastMem), 32)
<%  } -%>   
            let isValid := and(success, mload(add(pMem, pLastMem)))
            mstore(0, isValid)
            return(0,0x20)
        }
    }
}
