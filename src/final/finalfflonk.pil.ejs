//Configuration values
constant %N = 2**<%- nBits %>; // Upper bound for the number of rows to be used across various state machines.

// Global state machine
// It is used to store various polynomials representing small lookup tables 
namespace Global(%N);
    pol constant L1; // Lagrange polynomial for the first public

<% for (let i=6; i<nPublics; i+=6) { -%>
    pol constant L<%- Math.floor(i/6) +1 %>; // Lagrange polynomial for the 12 publics corresponding to the i^th row
<% } -%>
    
<% for (let i=1; i<nPublics; i++) { -%>
    pol constant L<%- i+1 %>; // Lagrange polynomial for the i^th p
<% } -%>

namespace Final(%N);
    pol constant S[6];
    pol constant C[5];
    pol commit a[6];

    // Set all the publics. They are stored in the following order -> a[0](0), ....  , a[11](0), a[0](1), .... , a[11](1) ... 
<% for (let i=0; i<nPublics; i++) { -%>
    public pub<%- i%> = a[0](<%- i %>);
<% } -%>

    // Enforces the first element of the j^th row a[0](j) to be equal to the corresponding public input
<% for (let i=0; i<nPublics; i++) { -%>
    Global.L<%- i+1 %> * (a[0] - :pub<%- i %>) = 0;
<% } -%>

    // Normal plonk gates

    // C[0] -> Qm
    // C[1] -> Ql
    // C[2] -> Qr
    // C[3] -> Qo
    // C[4] -> Qc
    
    pol a01 = a[0]*a[1];
    C[0]*a01 + C[1]*a[0] + C[2]*a[1] + C[3]*a[2] + C[4] = 0;

    pol a34 = a[3]*a[4];
    C[0]*a34 + C[1]*a[3] + C[2]*a[4] + C[3]*a[5] + C[4] = 0;

    // Connection equations
<% 
    let a = [];
    let S = [];
    for(let i = 0; i < 6; ++i) {
        a.push(`a[${i}]`);
        S.push(`S[${i}]`);
    }
-%>
    { <%- a.join(',') %> } connect { <%- S.join(',')  %> }


        