//Configuration values
constant %N = 2**<%- nBits %>; // Upper bound for the number of rows to be used across various state machines.

// Global state machine
// It is used to store various polynomials representing small lookup tables 
namespace Global(%N);
    pol constant L1; // Lagrange polynomial for the first public

<% for (let i=9; i<nPublics; i+=9) { -%>
    pol constant L<%- Math.floor(i/9) +1 %>; // Lagrange polynomial for the 12 publics corresponding to the i^th row
<% } -%>
    
<% for (let i=1; i<nPublics; i++) { -%>
    pol constant L<%- i+1 %>; // Lagrange polynomial for the i^th p
<% } -%>

namespace Final(%N);
    pol constant S[9];
    pol constant C[5];
    pol constant PARTIAL;
    pol constant POSEIDON_T;
    pol constant RANGE_CHECK;
    pol constant RANGE;
    pol constant GATE;
    pol constant GLCMULADD;
    pol commit a[9];

    // Set all the publics. They are stored in the following order -> a[0](0), ....  , a[11](0), a[0](1), .... , a[11](1) ... 
<% for (let i=0; i<nPublics; i++) { -%>
    public pub<%- i%> = a[0](<%- i %>);
<% } -%>

    // Enforces the first element of the j^th row a[0](j) to be equal to the corresponding public input
<% for (let i=0; i<nPublics; i++) { -%>
    Global.L<%- i+1 %> * (a[0] - :pub<%- i %>) = 0;
<% } -%>

    // Normal plonk gates

    // C[0] -> Qm
    // C[1] -> Ql
    // C[2] -> Qr
    // C[3] -> Qo
    // C[4] -> Qc
    
    pol a01 = a[0]*a[1];
    pol g012 = C[0]*a01 + C[1]*a[0] + C[2]*a[1] + C[3]*a[2] + C[4];
    g012*GATE = 0;

    pol a34 = a[3]*a[4];
    pol g345 = C[0]*a34 + C[1]*a[3] + C[2]*a[4] + C[3]*a[5] + C[4];
    g345*GATE = 0;

    pol a67 = a[6]*a[7];
    pol g678 = C[0]*a67 + C[1]*a[6] + C[2]*a[7] + C[3]*a[8] + C[4];
    g678*GATE = 0;

    // POSEIDON GATE - Check that a BN128 Poseidon round is valid

<% for (let i=0; i<nInPoseidon; i++) { -%>

    // Calculate the 7th power of the <%- i %>th element
    pol a<%- i %>_1 = a[<%- i %>] +  C[<%- i %>];
    pol a<%- i %>_2 = a<%- i %>_1 * a<%- i %>_1;
    pol a<%- i %>_4 = a<%- i %>_2 * a<%- i %>_2;
    pol a<%- i %>_5 = a<%- i %>_4 * a<%- i %>_1;
<%      if (i==0) { -%>
    pol a<%- i %>_R = a<%- i %>_5; // The first element is always exponentiated, no matter the round
<%      } else { -%>
    pol a<%- i %>_R = PARTIAL * (a<%- i %>_1 - a<%- i %>_5) + a<%- i %>_5; // Determine if the <%- i %>th element needs to be raised to the 5th power or not using PARTIAL
<%      } -%>
<% } -%>

    // Check Poseidon rounds that use M matrix
<%  
const poseidonMDS = [];
for(let i = 0; i < nInPoseidon; ++i) { 
    const poseidonRow = [];
    for(let j = 0; j < nInPoseidon; j++) { 
        poseidonRow.push(`${BigInt(M[i][j])} * a${j}_R`); 
    }
    poseidonMDS.push(poseidonRow);
}    -%>

<% for(let i = 0; i < nInPoseidon; ++i) { -%>
    POSEIDON_T * (a[<%= i %>]' - <%- poseidonMDS[i].join(' + ') %>) = 0;
<% } -%>

    // CMUL GATE - Check that a * b + c in Fp³ using (X³ - X - 1) as a generator is performed correctly
    // In this particular case, 
    // a = [a[0], a[1], a[2]]
    // b = [a[3], a[4], a[5]]
    // c = [a[6], a[7], a[8]]
    // and this must be equal to [ a[0]', a[1]', a[2]' ]
    
    // Since the modulo is known (X³ - X - 1) we can calculate the coefficients in general form by calculating 
    // (a0 + a1*x + a2*x²)*(b0 + b1*x + b2*x²) and then using long division to get the residue when dividing by the modulo
    // We get the following result: (a0*b0 + a1*b2 + a2*b1) + (a0*b1 + a1*b0 + a1*b2 + a2*b1 + a2*b2)x + (a0*b2 + a2*b2 + a2*b0 + a1*b1)x²
    // This result can be expressed using this intermediate polyonials A,B,C,D,E,F that have less than degree 2
    pol a0 = a[0]  + 16*0xFFFFFFFF00000001;
    pol a1 = a[1]  + 16*0xFFFFFFFF00000001;
    pol a2 = a[2]  + 16*0xFFFFFFFF00000001;
    pol b0 = a[3]  + 16*0xFFFFFFFF00000001;
    pol b1 = a[4]  + 16*0xFFFFFFFF00000001;
    pol b2 = a[5]  + 16*0xFFFFFFFF00000001;
    pol c0 = a[0]' + 16*0xFFFFFFFF00000001;
    pol c1 = a[1]' + 16*0xFFFFFFFF00000001;
    pol c2 = a[2]' + 16*0xFFFFFFFF00000001;

    pol A1 = (a0 + a1) * (b0 + b1);
    pol B1 = (a0 + a2) * (b0 + b2);
    pol C1 = (a1 + a2) * (b1 + b2);
    pol D1 = a0 * b0;
    pol E1 = a1 * b1;
    pol F1 = a2 * b2;

    // Whenever CMUL = 1, check that the CMul result matches with the values stored in a[3]', a[4]' and a[5]' respectively
    GLCMULADD * (a[3]' - (C1 + D1 - E1 - F1 + c0)) = 0;
    GLCMULADD * (a[4]' - (A1 + C1 - 2*E1 - D1 + c1)) = 0;
    GLCMULADD * (a[5]' - (B1 - D1 + E1 + c2)) = 0;

    g678*GLCMULADD = 0;

    // Range Check

    RANGE_CHECK * (a[0] - (a[1] + 65536*a[2] + 4294967296*a[3] + 281474976710656*a[4] + 18446744073709551616*a[5])) = 0;

    // RANGE_CHECK { a[1] } in { RANGE };
    // RANGE_CHECK { a[2] } in { RANGE };
    // RANGE_CHECK { a[3] } in { RANGE };
    // RANGE_CHECK { a[4] } in { RANGE };
    // RANGE_CHECK { a[5] } in { RANGE };

    g678*RANGE_CHECK = 0;

    
    // Connection equations
<% 
    let a = [];
    let S = [];
    for(let i = 0; i < 9; ++i) {
        a.push(`a[${i}]`);
        S.push(`S[${i}]`);
    }
-%>
    { <%- a.join(',') %> } connect { <%- S.join(',')  %> }


        