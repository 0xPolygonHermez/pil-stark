include "poseidong.pil";
include "climb_key.pil";

namespace Storage(%N);

    pol commit free0, free1, free2, free3;

    // Registers
    pol commit hashLeft0, hashLeft1, hashLeft2, hashLeft3;
    pol commit hashRight0, hashRight1, hashRight2, hashRight3;
    pol commit oldRoot0, oldRoot1, oldRoot2, oldRoot3;
    pol commit newRoot0, newRoot1, newRoot2, newRoot3;
    pol commit valueLow0, valueLow1, valueLow2, valueLow3;
    pol commit valueHigh0, valueHigh1, valueHigh2, valueHigh3;
    pol commit siblingValueHash0, siblingValueHash1, siblingValueHash2, siblingValueHash3;
    pol commit rkey0, rkey1, rkey2, rkey3;
    pol commit siblingRkey0, siblingRkey1, siblingRkey2, siblingRkey3;
    pol commit rkeyBit;
    pol commit level;
    pol commit pc;

    pol commit inOldRoot;
    pol commit inNewRoot;
    pol commit inValueLow;
    pol commit inValueHigh;
    pol commit inSiblingValueHash;
    pol commit inRkey;
    pol commit inRkeyBit;
    pol commit inSiblingRkey;
    pol commit inFree;
    pol commit inRotlVh;
    pol commit inLevel;

    pol commit setHashLeft;
    pol commit setHashRight;
    pol commit setOldRoot;
    pol commit setNewRoot;
    pol commit setValueLow;
    pol commit setValueHigh;
    pol commit setSiblingValueHash;
    pol commit setRkey;
    pol commit setSiblingRkey;
    pol commit setRkeyBit;
    pol commit setLevel;

    pol commit hash;
    pol commit hashType;
    pol commit latchSet;
    pol commit latchGet;
    pol commit climbRkey;
    pol commit climbSiblingRkey;
    pol commit climbBitN;
    pol commit jmpz;
    pol commit jmpnz;
    pol commit jmp;
    pol commit const0;
    pol commit jmpAddress;

    pol commit incCounter;
    incCounter' = incCounter * (1 - latchSet - latchGet - Global.L1) + hash;

    // We assume hash and latch never goes together
    // We assume first instruction is not a latch nor a hash.

    // Selectors

    pol op0 =
        inLevel * level +
        inOldRoot * oldRoot0 +
        inNewRoot * newRoot0 +
        inValueLow * valueLow0 +
        inValueHigh * valueHigh0 +
        inSiblingValueHash * siblingValueHash0 +
        inSiblingRkey * siblingRkey0 +
        inRkey * rkey0 +
        inFree * free0 +
        inRkeyBit * rkeyBit +
        inRotlVh * valueHigh3 +
        const0;

    pol op1 =
        inOldRoot * oldRoot1 +
        inNewRoot * newRoot1 +
        inValueLow * valueLow1 +
        inValueHigh * valueHigh1 +
        inSiblingValueHash * siblingValueHash1 +
        inSiblingRkey * siblingRkey1 +
        inRkey * rkey1 +
        inFree * free1 +
        inRotlVh * valueHigh0;

    pol op2 =
        inOldRoot * oldRoot2 +
        inNewRoot * newRoot2 +
        inValueLow * valueLow2 +
        inValueHigh * valueHigh2 +
        inSiblingValueHash * siblingValueHash2 +
        inSiblingRkey * siblingRkey2 +
        inRkey * rkey2 +
        inFree * free2 +
        inRotlVh * valueHigh1;

    pol op3 =
        inOldRoot * oldRoot3 +
        inNewRoot * newRoot3 +
        inValueLow * valueLow3 +
        inValueHigh * valueHigh3 +
        inSiblingValueHash * siblingValueHash3 +
        inSiblingRkey * siblingRkey3 +
        inRkey * rkey3 +
        inFree * free3 +
        inRotlVh * valueHigh2;
    // Setters

    hashLeft0' = setHashLeft * (op0 - hashLeft0) + hashLeft0;
    hashLeft1' = setHashLeft * (op1 - hashLeft1) + hashLeft1;
    hashLeft2' = setHashLeft * (op2 - hashLeft2) + hashLeft2;
    hashLeft3' = setHashLeft * (op3 - hashLeft3) + hashLeft3;

    hashRight0' = setHashRight * (op0 - hashRight0) + hashRight0;
    hashRight1' = setHashRight * (op1 - hashRight1) + hashRight1;
    hashRight2' = setHashRight * (op2 - hashRight2) + hashRight2;
    hashRight3' = setHashRight * (op3 - hashRight3) + hashRight3;

    oldRoot0' = setOldRoot * (op0 - oldRoot0) + oldRoot0;
    oldRoot1' = setOldRoot * (op1 - oldRoot1) + oldRoot1;
    oldRoot2' = setOldRoot * (op2 - oldRoot2) + oldRoot2;
    oldRoot3' = setOldRoot * (op3 - oldRoot3) + oldRoot3;

    newRoot0' = setNewRoot * (op0 - newRoot0) + newRoot0;
    newRoot1' = setNewRoot * (op1 - newRoot1) + newRoot1;
    newRoot2' = setNewRoot * (op2 - newRoot2) + newRoot2;
    newRoot3' = setNewRoot * (op3 - newRoot3) + newRoot3;

    valueLow0' = setValueLow * (op0 - valueLow0) + valueLow0;
    valueLow1' = setValueLow * (op1 - valueLow1) + valueLow1;
    valueLow2' = setValueLow * (op2 - valueLow2) + valueLow2;
    valueLow3' = setValueLow * (op3 - valueLow3) + valueLow3;

    valueHigh0' = setValueHigh * (op0 - valueHigh0) + valueHigh0;
    valueHigh1' = setValueHigh * (op1 - valueHigh1) + valueHigh1;
    valueHigh2' = setValueHigh * (op2 - valueHigh2) + valueHigh2;
    valueHigh3' = setValueHigh * (op3 - valueHigh3) + valueHigh3;

    siblingValueHash0' = setSiblingValueHash * (op0 - siblingValueHash0) + siblingValueHash0;
    siblingValueHash1' = setSiblingValueHash * (op1 - siblingValueHash1) + siblingValueHash1;
    siblingValueHash2' = setSiblingValueHash * (op2 - siblingValueHash2) + siblingValueHash2;
    siblingValueHash3' = setSiblingValueHash * (op3 - siblingValueHash3) + siblingValueHash3;

    rkey0' = setRkey * (op0 - rkey0) + rkey0;
    rkey1' = setRkey * (op1 - rkey1) + rkey1;
    rkey2' = setRkey * (op2 - rkey2) + rkey2;
    rkey3' = setRkey * (op3 - rkey3) + rkey3;

    siblingRkey0' = setSiblingRkey * (op0 - siblingRkey0) + siblingRkey0;
    siblingRkey1' = setSiblingRkey * (op1 - siblingRkey1) + siblingRkey1;
    siblingRkey2' = setSiblingRkey * (op2 - siblingRkey2) + siblingRkey2;
    siblingRkey3' = setSiblingRkey * (op3 - siblingRkey3) + siblingRkey3;

    rkeyBit' = setRkeyBit * (op0-rkeyBit) + rkeyBit;
    rkeyBit * (1 - rkeyBit) = 0;

    level' = setLevel * (op0-level) + level;

    // Instruction that guarantees that op = hash(hl, hr); the poseidon SM will do the work; the result will be feeded by free
    hash {
        0, 0, 1,
        hashLeft0, hashLeft1, hashLeft2, hashLeft3,
        hashRight0, hashRight1, hashRight2, hashRight3,
        hashType, 0, 0, 0,
        op0, op1, op2, op3
    } is PoseidonG.result3 {
            PoseidonG.result1, PoseidonG.result2, PoseidonG.result3,
            PoseidonG.in0,
            PoseidonG.in1,
            PoseidonG.in2,
            PoseidonG.in3,
            PoseidonG.in4,
            PoseidonG.in5,
            PoseidonG.in6,
            PoseidonG.in7,
            PoseidonG.hashType,
            PoseidonG.cap1,
            PoseidonG.cap2,
            PoseidonG.cap3,
            PoseidonG.hash0,
            PoseidonG.hash1,
            PoseidonG.hash2,
            PoseidonG.hash3};

    pol climbKeyBit = climbBitN * (1 - rkeyBit) + (1 - climbBitN) * rkeyBit;

    climbRkey + climbSiblingRkey {
        climbRkey * rkey0 + climbSiblingRkey * siblingRkey0, climbRkey * rkey1 + climbSiblingRkey * siblingRkey1, climbRkey * rkey2 + climbSiblingRkey * siblingRkey2, climbRkey * rkey3 + climbSiblingRkey * siblingRkey3,
        level, climbKeyBit,
        op0, op1, op2, op3
    } is ClimbKey.result {
        ClimbKey.key0, ClimbKey.key1, ClimbKey.key2, ClimbKey.key3,
        ClimbKey.level', ClimbKey.bit,
        ClimbKey.key0', ClimbKey.key1', ClimbKey.key2', ClimbKey.key3'
    };

    pol commit op0inv;
    pol opIsZero = 1 - op0 * op0inv;
    opIsZero * op0 = 0;
    pol doJump = jmp + jmpz * opIsZero + jmpnz * (1 - opIsZero);
    pc' = doJump * (jmpAddress - pc - 1) + pc + 1;
    pc * Global.L1 = 0;
    incCounter * Global.L1 = 0;

    // Last pc' must return to be pc=0 in order to close the program loop
    // Once the work is done, the rest of instructions must be:
    // if op0 = $n-1 (last instruction of the program) then pc=0 (jump to the beginning of the program)

    /*
       code generated with:
       node tools/pil_pol_table/bits_compose.js "hash,hashType,latchGet,latchSet,climbRkey,climbSiblingRkey,climbBitN,jmpz,jmp,setHashLeft,setHashRight,setLevel,setNewRoot,setOldRoot,setRkey,setRkeyBit,setSiblingRkey,setSiblingValueHash,setValueHigh,setValueLow,jmpnz,inFree,inNewRoot,inOldRoot,inRkey,inRkeyBit,inSiblingValueHash,inValueLow,inValueHigh,inRotlVh,inLevel" -b
    */

    pol operation =
          2**0  * hash                  + 2**1  * hashType              + 2**2  * latchGet              + 2**3  * latchSet
        + 2**4  * climbRkey             + 2**5  * climbSiblingRkey      + 2**6  * climbBitN             + 2**7  * jmpz
        + 2**8  * jmp                   + 2**9  * setHashLeft           + 2**10 * setHashRight          + 2**11 * setLevel
        + 2**12 * setNewRoot            + 2**13 * setOldRoot            + 2**14 * setRkey               + 2**15 * setRkeyBit
        + 2**16 * setSiblingRkey        + 2**17 * setSiblingValueHash   + 2**18 * setValueHigh          + 2**19 * setValueLow
        + 2**20 * jmpnz                 + 2**21 * inFree                + 2**22 * inNewRoot             + 2**23 * inOldRoot
        + 2**24 * inRkey                + 2**25 * inRkeyBit             + 2**26 * inSiblingValueHash    + 2**27 * inValueLow
        + 2**28 * inValueHigh           + 2**29 * inRotlVh              + 2**30 * inLevel;

        (1 - hash) * hash = 0;
        (1 - hashType) * hashType = 0;
        (1 - latchGet) * latchGet = 0;
        (1 - latchSet) * latchSet = 0;
        (1 - climbRkey) * climbRkey = 0;
        (1 - climbSiblingRkey) * climbSiblingRkey = 0;
        (1 - climbBitN) * climbBitN = 0;
        (1 - jmpz) * jmpz = 0;
        (1 - jmp) * jmp = 0;
        (1 - setHashLeft) * setHashLeft = 0;
        (1 - setHashRight) * setHashRight = 0;
        (1 - setLevel) * setLevel = 0;
        (1 - setNewRoot) * setNewRoot = 0;
        (1 - setOldRoot) * setOldRoot = 0;
        (1 - setRkey) * setRkey = 0;
        (1 - setRkeyBit) * setRkeyBit = 0;
        (1 - setSiblingRkey) * setSiblingRkey = 0;
        (1 - setSiblingValueHash) * setSiblingValueHash = 0;
        (1 - setValueHigh) * setValueHigh = 0;
        (1 - setValueLow) * setValueLow = 0;
        (1 - jmpnz) * jmpnz = 0;
        (1 - inFree) * inFree = 0;
        (1 - inNewRoot) * inNewRoot = 0;
        (1 - inOldRoot) * inOldRoot = 0;
        (1 - inRkey) * inRkey = 0;
        (1 - inRkeyBit) * inRkeyBit = 0;
        (1 - inSiblingValueHash) * inSiblingValueHash = 0;
        (1 - inValueLow) * inValueLow = 0;
        (1 - inValueHigh) * inValueHigh = 0;
        (1 - inRotlVh) * inRotlVh = 0;
        (1 - inLevel) * inLevel = 0;

    pol constant OPERATION;
    pol constant CONST0;
    pol constant JMP_ADDRESS;
    pol constant LINE; // 0, 1, 2, ...
    pol constant IN_SIBLING_RKEY;

    { operation, const0, jmpAddress, pc, inSiblingRkey } in { OPERATION, CONST0, JMP_ADDRESS, LINE, IN_SIBLING_RKEY }

