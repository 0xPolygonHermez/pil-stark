/*
    Padding sha256 rBit
    This state machine packs the rBits in bytes (r8)
    And stOut bits in 8 field Elements of 32bit slints.
    It also forces the connection bettwien keccak-f blocks.

            s1              s2
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●              ┌─────────────────┐
            ●               ●              │ s1 = sout(n-1)  │
            ●               ●              │ s2 = sin(n)     │
            ●               ●              │  8*64 = 256     │
            ●               ●              └─────────────────┘
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
───────────────────────────────────────────────
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
                   ●
            ●               ●
            ●               ●                   ┌─────────────────┐
            ●               ●                   │ s1 = rIn (1/2)  │
            ●               ●                   | s2 = sout(n)    |
            ●               ●                   │                 │
            ●               ●                   │ 32*8 =  256     │
            ●               ●                   └─────────────────┘
            ●               ●
                   ●
            .               .
            .               .
            .               .
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
            ●               ●
                   ●                ●●●●●●●●      sOut{0..7}[i]
         ──────────────────────────────────────────────
            ●
            ●
            ●
            ●
            ●
            ●
            ●
            ●
                   ●
            ●
            ●                         ┌─────────────────┐
            ●                         │ s1 = rIn (2/2)  │
            .                         │                 │
            .                         │ 32*8 = 256      │
            .                         └─────────────────┘
            ●
            ●
                   ●
*/

/*

    The output for r8 is:

    [r8, r8Id]

    The output for sOut

    [sOut0, sOut1, sOut2, sOut3, sOut4, sOut5, sOut6, sOut7, connect, sOutId]

*/

include "bits2field_sha256.pil";

namespace PaddingSha256Bit(%N);
    pol commit s1, s2;

    // Input connection                                                          rBit -> 1   1   0   1   0   1   1   1   X
                                                                             // Fr8   -> 128 64  32  16  8   4   2   1   0
                                                                             //  r8   -> 128 192 192 208 208 212 214 215 0
                                                                             //latchR8-> 0   0   0   0   0   0   0   0   1   0 0 0 0 0
    pol commit r8;
    pol constant r8Id;

    pol commit connected;
    pol commit sOut0, sOut1, sOut2, sOut3, sOut4, sOut5, sOut6, sOut7;
    pol constant sOutId;

    pol constant latchR8;
    pol constant Fr8;     // Factor to add to r8

    pol constant latchSOut;
    pol constant FSOut0, FSOut1, FSOut2, FSOut3, FSOut4, FSOut5, FSOut6, FSOut7;

    r8' = r8 * (1-latchR8) + s1'*Fr8';

    sOut0' = sOut0*(1-latchSOut) + s2'*FSOut0';
    sOut1' = sOut1*(1-latchSOut) + s2'*FSOut1';
    sOut2' = sOut2*(1-latchSOut) + s2'*FSOut2';
    sOut3' = sOut3*(1-latchSOut) + s2'*FSOut3';
    sOut4' = sOut4*(1-latchSOut) + s2'*FSOut4';
    sOut5' = sOut5*(1-latchSOut) + s2'*FSOut5';
    sOut6' = sOut6*(1-latchSOut) + s2'*FSOut6';
    sOut7' = sOut7*(1-latchSOut) + s2'*FSOut7';

    connected'*(1-latchSOut) = connected*(1-latchSOut);
    connected * (1-connected) = 0;
    s1 *( 1- s1) = 0;
    s2 *( 1- s2) = 0;


    pol constant HIn;
    pol constant DoConnect;

    pol muxOut = connected*(s1 - HIn) + HIn;
    DoConnect*(s2-muxOut) = 0;

    pol constant ConnS1, ConnS2, ConnBits2FieldBit;

    {s1, s2, Bits2FieldSha256.bit} connect {ConnS1, ConnS2, ConnBits2FieldBit}

