pragma circom 2.1.0;

include "gl.circom";
include "lessthangl.circom";
include "poseidon.circom";
include "bitify.circom";
include "sha256/sha256.circom";
include "fft.circom";
include "merklehash.circom";
include "evalpol.circom";
include "treeselector.circom";
include "bn1togl3.circom";
include "compconstant64.circom";

<%
class Transcript {
    constructor() {
        this.state = "0";
        this.pending = [];
        this.out = [];
        this.out3 = [];
        this.stCnt =0;
        this.hCnt =0;
        this.hiCnt =0;
        this.n2bCnt =0;
        this.bn1togl3Cnt =0;

        this.code = [];
    }


    getField(v) {
        this.code.push(`${v} <== SetChallenge()([${this.getFields1()}, ${this.getFields1()}, ${this.getFields1()}]);`);    
    }

    getFields1() {
        if (this.out3.length > 0) {
            return this.out3.shift();
        }
        if (this.out.length > 0) {
            const cName = `bn1togl3_${this.bn1togl3Cnt++}`;
            this.code.push(`signal ${cName}[3] <== BN1toGL3()(${this.out.shift()});`);
            this.out3.push(`${cName}[0]`);
            this.out3.push(`${cName}[1]`);
            this.out3.push(`${cName}[2]`);
            this.hiCnt++;
            return this.getFields1();
        }
        this.updateState();
        return this.getFields1();
    }

    getFields253() {
        if (this.out.length > 0) {
            this.hiCnt++;
            return this.out.shift();
        }
        this.updateState();
        return this.getFields253();

    }

    updateState() {
        if(this.hCnt > 0) {
            const firstUnused = Math.max(this.hiCnt, 1);
            if(firstUnused < 17) {
                this.code.push(`for(var i = ${firstUnused}; i < 17; i++){
        _ <== transcriptHash_${this.hCnt -1}[i]; // Unused transcript values        
    }`)
            }
        }
        while (this.pending.length<16) {
            this.pending.push("0");
        }
        this.code.push(`\n    signal transcriptHash_${this.hCnt++}[17] <== PoseidonEx(16,17)([${this.pending.join(',')}], ${this.state});`);
        for (let i=0; i<17; i++) {
            this.out[i] = `transcriptHash_${this.hCnt-1}[${i}]`;
        }
        this.out3 = [];
        this.state = `transcriptHash_${this.hCnt-1}[0]`;
        this.pending = [];
        this.hiCnt = 0;
    }


    put(a, l) {
        if (typeof l !== "undefined") {
            for (let i=0; i<l; i++) {
                this._add1(`${a}[${i}]`);
            }
        } else {
            this._add1(a);
        }
    }

    _add1(a) {
        this.out = [];
        this.out3 = [];
        this.pending.push(a);
        if (this.pending.length == 16) {
            this.updateState();
        }
    }

    getPermutations(v, n, nBits) {
        const totalBits = n*nBits;
        const NFields = Math.floor((totalBits - 1)/253)+1;
        const n2b = [];
        for (let i=0; i<NFields; i++) {
            const f = this.getFields253();
            n2b[i] = `transcriptN2b_${this.n2bCnt++}`;
            this.code.push(`signal ${n2b[i]}[254] <== Num2Bits_strict()(${f});`);
        }
        if(this.hiCnt < 17) {
            this.code.push(`for(var i = ${this.hiCnt}; i < 17; i++){
        _ <== transcriptHash_${this.hCnt - 1}[i]; // Unused transcript values           
    }\n`)
        }
        this.code.push(`// From each transcript hash converted to bits, we assign those bits to ys[q] to define the query positions`)
        this.code.push(`var q = 0; // Query number `)
        this.code.push(`var b = 0; // Bit number `)
        for(let i = 0; i<NFields; i++) {
            const nBits = i + 1 == NFields ? totalBits - 253*i : 253;
            this.code.push(`for(var j = 0; j < ${nBits}; j++) {
        ${v}[q][b] <== ${n2b[i]}[j];
        b++;
        if(b == ${starkStruct.steps[0].nBits}) {
            b = 0; 
            q++;
        }
    }`);
            if(nBits === 253) {
                this.code.push(`_ <== ${n2b[i]}[253]; // Unused last bit\n`);
            } else {
                this.code.push(`for(var j = ${nBits}; j < 254; j++) {
        _ <== ${n2b[i]}[j]; // Unused bits
    }`);
            }
        }
    }

    getCode() {
        for (let i=0; i<this.code.length; i++) this.code[i] = "    "+this.code[i];
        return this.code.join("\n");
    }

} -%>

<%  let maxValues = {};                                                                 -%>
<%  let ch = {type: "challenge"}; -%>
<%
    function val(r, max) {
        const p = 18446744069414584321n; // Goldilocks
        const q = 18446744073709551616n; // 2^64
        if(r.type === "number") {
            return max ? p : BigInt(r.value);
        } else if(r.type === "tmp") {
            const k = ((maxValues["tmp_" + r.id] - 1n) / p) + 1n;
            return max ? k*p : maxValues["tmp_" + r.id];
        } else if(r.type === "challenge") {
            const k = ((q - 1n) / p) + 1n;
            return max ? k*p : q;
        } else {
            return max ? p : p - 1n;
        }
    }
-%>

<% function addValuesBits(r1, r2) {
    return val(r1) + val(r2);
} -%>

<% function subValuesBits(r1, r2) {
    return val(r1) + val(r2, true);
} -%>

<% function mulValuesBits(r1, r2) {
    return Math.max(66, (5n*val(r1)*val(r2) / 18446744069414584321n).toString(2).length);
} -%>

<% function unrollCode(code) {                                                          -%>
<%  maxValues = {};                                                                     -%>
<%  let c = 0; -%>
<%  let v = 0; -%>
<%  let values = {}; -%>
<% function ref(r, destDim) { -%>
<%        if (r.type == "eval") {                               -%>
<%            return "evals[" + r.id + "]";                     -%>
<%        } else if (r.type == "challenge") {                   -%>
<%            return "challenges" + r.id;                       -%>
<%        } else if (r.type == "public") {                      -%>
<%            return "publics[" + r.id + "]";                   -%>
<%        } else if (r.type == "x") {                           -%>
<%            return "challenges7";                             -%>
<%        } else if (r.type == "Z") {                           -%>
<%            return "Z";                                       -%>
<%        } else if (r.type == "xDivXSubXi") {                  -%>
<%            return "xDivXSubXi";                              -%>
<%        } else if (r.type == "xDivXSubWXi") {                 -%>
<%            return "xDivXSubWXi";                             -%>
<%        } else if (r.type == "tmp") {                         -%>
<%            return "tmp_"+r.id;                               -%>
<%        } else if (r.type == "tree1") {                       -%>
<%            return "mapValues.tree1_" + r.id;                 -%>
<%        } else if (r.type == "tree2") {                       -%>
<%            return "mapValues.tree2_" + (r.id - starkInfo.nCm1);                                      -%>
<%        } else if (r.type == "tree3") {                                                               -%>
<%            return "mapValues.tree3_" + (r.id - starkInfo.nCm1 - starkInfo.nCm2);                     -%>
<%        } else if (r.type == "tree4") {                                                               -%>
<%            return "mapValues.tree4_" + (r.id - starkInfo.nCm1 - starkInfo.nCm2 - starkInfo.nCm3);    -%>
<%        } else if (r.type == "const") {                                                               -%>
<%            return "consts[" + r.id + "]";                                                            -%>
<%        } else if (r.type == "number") {                                                              -%>
<%            if(!((BigInt(r.value) + "_" + destDim) in values)) {                                                        -%>
<%                 if(destDim === 1) { -%>
    signal {maxNum} constValue_<%- c %> <== GLConst(<%- r.value %>)();
<%                 } else { -%>
    signal {maxNum} constValue_<%- c %>[3] <== GLConst3(<%- r.value %>)();
<%                 } -%>
<%                    values[BigInt(r.value) + "_" + destDim] = "constValue_" + c++;                                    -%>
<%            }                                                                                         -%>
<%            return values[BigInt(r.value) + "_" + destDim];                                                           -%>
<%        } else {                                                                                      -%>
<%            throw new Error("Invalid Ref: " +r.type);                                                 -%>
<%        }                                                                                             -%>
<%    } -%>

<% for(let i=0; i<code.length; i++) {                                 -%>
<%      let inst = code[i];                                           -%>
<%      if (inst.dest.type == "tmp" && ![1,3].includes(inst.dest.dim)) {                -%>
<%          throw new Error("Invalid dimension");                                       -%>
<%      }                                                                               -%>
<%      let ina;                                                                        -%>
<%      let inb;                                                                        -%>
<%      if(["add", "sub", "mul"].includes(inst.op)) {                                   -%>
<%          ina = ref(inst.src[0], inst.dest.dim);                                      -%>
<%          inb = ref(inst.src[1], inst.dest.dim);                                                    -%>
<%          if(inst.src[0].dim === 1 && inst.src[1].dim === 3 && (inst.src[0].type !== "number" 
                || (BigInt(inst.src[0].value) !== 0n && !((BigInt(inst.src[0].value) + "_" + inst.dest.dim) in values)))) {                        -%>
    signal {maxNum} <%- "value_" + v %>[3] <== GLC3()(<%- ina %>);
<%          ina = "value_" + v++;                                                       -%>
<%          } else if (inst.src[0].dim === 3 && inst.src[1].dim === 1 && (inst.src[1].type !== "number" 
                || (BigInt(inst.src[1].value) !== 0n && !((BigInt(inst.src[1].value) + "_" + inst.dest.dim) in values)))) {                -%>
    signal {maxNum} <%- "value_" + v %>[3] <== GLC3()(<%- inb %>);
<%          inb = "value_" + v++;                                                       -%>
<%          }                                                                           -%>
<%      } else if (inst.op == "copy") {                                                 -%>
<%          ina = ref(inst.src[0], inst.dest.dim);                                                     -%>
<%      }                                                                               -%>
<%      if (inst.op == "add") {                                                         -%>
<%               maxValues[ref(inst.dest)] = addValuesBits(inst.src[0], inst.src[1]);   -%>
<%          if ((inst.src[0].dim==1) && (inst.src[1].dim==1)) {                         -%>
    signal {maxNum} <%- ref(inst.dest) %> <== GLAdd()(<%- ina %>,<%- inb %>);
<%          } else if ((inst.src[0].dim==1) && (inst.src[1].dim==3)) {                  -%>
    signal {maxNum} <%- ref(inst.dest) %>[3] <== GLCAdd()(<%- ina %>, <%- ina %>);
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==1)) {                  -%>
    signal {maxNum} <%- ref(inst.dest) %>[3] <== GLCAdd()(<%- ina %>, <%- inb %>);
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==3)) {                  -%>
    signal {maxNum} <%- ref(inst.dest) %>[3] <== GLCAdd()(<%- ina %>, <%- inb %>);
<%          } else throw new Error("Invalid src dimensions");                          -%>
<%      } else if (inst.op == "sub") {                                                  -%>
<%               maxValues[ref(inst.dest)] = subValuesBits(inst.src[0], inst.src[1]); -%>
<%          if ((inst.src[0].dim==1) && (inst.src[1].dim==1)) {                         -%>
    signal {maxNum} <%- ref(inst.dest) %> <== GLSub()(<%- ina %>,<%- inb %>);
<%          } else if ((inst.src[0].dim==1) && (inst.src[1].dim==3)) {                  -%>
    signal {maxNum} <%- ref(inst.dest) %>[3] <== GLCSub()(<%- ina %>, <%- inb %>);
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==1)) {                  -%>
<%              if(inst.src[1].type !== "number" || BigInt(inst.src[1].value) !== 0n) { -%>
    signal {maxNum} <%- ref(inst.dest) %>[3] <== GLCSub()(<%- ina %>, <%- inb %>);
<%              } else { -%>
    signal {maxNum} <%- ref(inst.dest) %>[3] <== GLCCopy()(<%- ina %>);
<%              } -%>
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==3)) {                  -%>
    signal {maxNum} <%- ref(inst.dest) %>[3] <== GLCSub()(<%- ina %>, <%- inb %>);
<%          } else throw new Error("Invalid src dimensions");                          -%>
<%      } else if (inst.op == "mul") {                                                  -%>
<%               const maxQuotientBits = mulValuesBits(inst.src[0], inst.src[1]); -%>
<%               maxValues[ref(inst.dest)] = 18446744069414584320n;                      -%>
<%          if ((inst.src[0].dim==1) && (inst.src[1].dim==1)) {                         -%>
    signal {maxNum} <%- ref(inst.dest) %> <== GLMul(<%- maxQuotientBits %>)(<%- ina %>, <%- inb %>);
<%          } else if ((inst.src[0].dim==1) && (inst.src[1].dim==3)) {                  -%>
    signal {maxNum} <%- ref(inst.dest) %>[3] <== GLCMul(<%- maxQuotientBits %>)(<%- ina %>, <%- inb %>);
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==1)) {                  -%>
    signal {maxNum} <%- ref(inst.dest) %>[3] <== GLCMul(<%- maxQuotientBits %>)(<%- ina %>, <%- inb %>);
<%          } else if ((inst.src[0].dim==3) && (inst.src[1].dim==3)) {                  -%>
    signal {maxNum} <%- ref(inst.dest) %>[3] <== GLCMul(<%- maxQuotientBits %>)(<%- ina %>, <%- inb %>);
<%          } else throw new Error("Invalid src dimensions");                          -%>
<%      } else if (inst.op == "copy") {                                                 -%>
<%          maxValues[ref(inst.dest)] = val(inst.src[0]);                                -%>
<%          if (inst.src[0].dim==1) {                                                   -%>
    signal {maxNum} <%- ref(inst.dest) %> <== GLCopy()(<%- ina %>);
<%          } else if (inst.src[0].dim==3) {                                            -%>
    signal {maxNum} <%- ref(inst.dest) %>[3] <== GLCCopy()(<%- ina %>);
<%          } else throw new Error("Invalid src dimensions");                          -%>
<%      } else throw new Error("Invalid op");                                           -%>
<% }                                                                                    -%>
<% return ref(code[code.length-1].dest);                                                -%>
<% }                                                                                    -%>

template GLConst(num) {
    signal output {maxNum} out;

    out.maxNum = num;
    out <== num;
}

template GLConst3(num) {
    signal output {maxNum} out[3];

    out.maxNum = num;
    out <== [num, 0, 0];
}

template GLC3() {
    signal input {maxNum} in;
    signal output {maxNum} out[3];

    out.maxNum = in.maxNum;
    out <== [in, 0, 0];
}

template SetChallenge() {
    signal input values[3];
    signal output {maxNum} challenge[3];

    challenge.maxNum = 0xFFFFFFFFFFFFFFFF;
    challenge <== values;
}

/* 
    Calculate the transcript
*/ 
template Transcript() {

    signal input {maxNum} publics[<%- pil.publics.length %>];
    signal input rootC;
    signal input root1; 
    signal input root2; 
    signal input root3; 
    signal input root4;
    signal input {maxNum} evals[<%- starkInfo.evMap.length %>][3]; 
<% for (let s=1; s<starkStruct.steps.length; s++) {   -%>
    signal input s<%- s %>_root;
<% }                                                     -%>
    signal input {maxNum} finalPol[<%- 1 << starkStruct.steps[starkStruct.steps.length-1].nBits %>][3];

    signal output {maxNum} challenges[8][3];  
    signal output ys[<%- starkStruct.nQueries %>][<%- starkStruct.steps[0].nBits %>];
<% for (let s=0; s<starkStruct.steps.length; s++) {   -%>
    signal output {maxNum} s<%- s %>_specialX[3];
<% }                                                    -%>  

<%
const transcript = new Transcript();
transcript.put("rootC"); 
transcript.put("publics", pil.publics.length);
transcript.put("root1");
transcript.getField("challenges[0]", 3);
transcript.getField("challenges[1]", 3);
transcript.put("root2");
transcript.getField("challenges[2]", 3);
transcript.getField("challenges[3]", 3);
transcript.put("root3");
transcript.getField("challenges[4]", 3);
transcript.put("root4");
transcript.getField("challenges[7]", 3);
for (let i=0; i<starkInfo.evMap.length; i++) {
    transcript.put(`evals[${i}]`, 3);
}
transcript.getField("challenges[5]", 3);
transcript.getField("challenges[6]", 3);
for (let si=0; si<starkStruct.steps.length; si++) {
    transcript.getField(`s${si}_specialX`, 3);
    if (si < starkStruct.steps.length-1) {
        transcript.put(`s${si+1}_root`);
    } else {
        for (let j=0; j< 1<<starkStruct.steps[starkStruct.steps.length-1].nBits; j++ ) {
            transcript.put(`finalPol[${j}]`, 3);
        }
    }
}
transcript.getPermutations("ys", starkStruct.nQueries, starkStruct.steps[0].nBits);

-%>

<%- transcript.getCode() %>

}

/*
    Verify that FRI polynomials are built properly
*/
template parallel VerifyFRI(prevStepBits, currStepBits, nextStepBits, e0, e1) {
    var nextStep = currStepBits - nextStepBits;
    var step = prevStepBits - currStepBits;

    signal input ys[currStepBits];
    signal input {maxNum} s_specialX[3];
    signal input {maxNum} s_vals_curr[1 << step][3];
    signal input {maxNum} s_vals_next[1 << nextStep][3];
    signal input enable;

    var p = 0xFFFFFFFF00000001;

    signal {maxNum} s_sx[currStepBits - 1];
    s_sx.maxNum = p - 1;

    signal {maxNum} inp[currStepBits - 2];
    inp.maxNum = p - 1;

    signal {maxNum} ina;
    signal {maxNum} inb;
    ina.maxNum = p - 1;
    inb.maxNum = p - 1;

    ina <== ys[0] * (e1 - e0) + e0;
    inb <== ys[1] * (invroots(prevStepBits - 1) -1) + 1;
    s_sx[0] <== GLMul(64)(ina, inb);
    for (var i=1; i< currStepBits - 1; i++) {
        inp[i - 1] <== ys[i + 1] * (invroots(prevStepBits - (i + 1)) -1) + 1;
        s_sx[i] <== GLMul(64)(s_sx[i-1], inp[i - 1]);
    }

    signal {maxNum} s_X[3]; 
    if(currStepBits > 1) {
        s_X.maxNum = s_sx.maxNum;
        s_X <== [s_sx[currStepBits - 2], 0, 0];
    } else {
        signal {maxNum} inp1 <== GLConst(e0)();
        signal {maxNum} inp2;
        inp2.maxNum = p - 1;
        inp2 <== ys[0] * (invroots(prevStepBits) -1) + 1;

        signal {maxNum} mul <== GLMul(64)(inp1, inp2);
        s_X.maxNum = mul.maxNum;
        s_X <== [mul, 0, 0];
    }

    signal {maxNum} coefs[1 << step][3] <== FFT(step, 1)(s_vals_curr);
<%  const maxQuotientBitsEvalXPrime = mulValuesBits({}, ch); -%>
    signal {maxNum} evalXprime[3] <== GLCMul(<%- maxQuotientBitsEvalXPrime %>)(s_specialX, s_X);
    signal evalPol[3] <== EvalPol(1 << step)(coefs, evalXprime);
    
    signal s_keys_lowValues[nextStep];
    for(var i = 0; i < nextStep; i++) { s_keys_lowValues[i] <== ys[i + nextStepBits]; } 
    signal {maxNum} lowValues[3] <== TreeSelector(nextStep, 3)(s_vals_next, s_keys_lowValues);

    signal {maxNum} vals[3] <== GLCSub()(evalPol, lowValues);
    signal {maxNum} normC[3] <== GLCNorm(66)(vals);
    
    enable * normC[0] === 0;
    enable * normC[1] === 0;
    enable * normC[2] === 0;
}

/* 
    Verify that all committed polynomials are calculated correctly
*/
template parallel VerifyEvaluations() {
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    signal input {maxNum} challenges0[3];
    signal input {maxNum} challenges1[3];
<% } -%>   
    signal input {maxNum} challenges2[3];
    signal input {maxNum} challenges3[3];
    signal input {maxNum} challenges4[3];
    signal input {maxNum} challenges7[3];
    signal input {maxNum} evals[<%- starkInfo.evMap.length %>][3];
    signal input {maxNum} publics[<%- pil.publics.length %>];
    signal input enable;

    var p = 0xFFFFFFFF00000001;

    // zMul stores all the powers of z (which is stored in challenge7) up to nBits, i.e, [z, z^2, ..., z^nBits]
    signal {maxNum} zMul[<%- starkStruct.nBits %>][3];
    zMul.maxNum = 0xFFFFFFFFFFFFFFFF;
    for (var i=0; i< <%- starkStruct.nBits %> ; i++) {
        if(i==0){
<%  const maxQuotientBitszMul0 = mulValuesBits(ch, ch); -%>
            zMul[i] <== GLCMul(<%- maxQuotientBitszMul0 %>)(challenges7, challenges7);
        } else {
            zMul[i] <== GLCMul(66)(zMul[i-1], zMul[i-1]);
        }
    }

    signal {maxNum} oneGL[3];
    oneGL.maxNum = 1;
    oneGL <== [1,0,0];

    // Store the vanishing polynomial Zg = x^nBits - 1 evaluated at z
    signal {maxNum} Z[3] <== GLCSub()(zMul[<%- starkStruct.nBits - 1 %>], oneGL);

    // Using the evaluations committed and the challenges,
    // calculate the sum of q_i, i.e, q_0(X) + challenge * q_1(X) + challenge^2 * q_2(X) +  ... + challenge^(l-1) * q_l-1(X) evaluated at z 
<% const evalP = unrollCode(starkInfo.verifierCode.first) -%>

    signal {maxNum} xAcc[<%- starkInfo.qDeg %>][3]; //Stores, at each step, x^i evaluated at z
    signal {maxNum} qStep[<%- starkInfo.qDeg-1 %>][3]; // Stores the evaluations of Q_i
    signal {maxNum} qAcc[<%- starkInfo.qDeg %>][3]; // Stores the accumulate sum of Q_i

    qStep.maxNum = p - 1;
    qAcc.maxNum = <%- starkInfo.qDeg %>*(p - 1);
    xAcc.maxNum = p - 1;
    
    // Note: Each Qi has degree < n. qDeg determines the number of polynomials of degree < n needed to define Q
    // Calculate Q(X) = Q1(X) + X^n*Q2(X) + X^(2n)*Q3(X) + ..... X^((qDeg-1)n)*Q(X) evaluated at z 
    for (var i=0; i< <%- starkInfo.qDeg %>; i++) {
        if (i==0) {
            xAcc[0] <== [1,0, 0];
            qAcc[0] <== evals[<%- starkInfo.evIdx.cm[0][starkInfo.qs[0]] %>+i];
        } else {
            xAcc[i] <== GLCMul(66)(xAcc[i-1], zMul[<%- starkStruct.nBits - 1 %>]);
            qStep[i-1] <== GLCMul(66)(xAcc[i], evals[<%- starkInfo.evIdx.cm[0][starkInfo.qs[0]] %>+i]);
            qAcc[i] <== GLCAdd()(qAcc[i-1], qStep[i-1]);
        }
    }

    signal {maxNum} QZ[3] <== GLCMul(<%- 64 + starkInfo.qDeg %>)(qAcc[<%- starkInfo.qDeg-1 %>], Z); // Stores the result of multiplying Q(X) per Zg(X)

    // Final normalization
    signal {maxNum} vals[3] <== GLCSub()(<%- evalP %>, QZ);
<%  const maxQuotientBitsP = Math.max(64, ((maxValues[evalP] + 18446744069414584321n)).toString(2).length) + 2; -%>
<%  console.log(); -%>
    signal {maxNum} normC[3] <== GLCNorm(<%- maxQuotientBitsP %>)(vals);

    // Final Verification. Check that Q(X)*Zg(X) = sum of linear combination of q_i, which is stored at <%- evalP %> 
    enable * normC[0] === 0;
    enable * normC[1] === 0;
    enable * normC[2] === 0;

}

/* 
    Verify that the initial FRI polynomial, which is the lineal combination of the committed polynomials
    during the STARK phases, is built properly
*/
template parallel VerifyQuery(currStepBits, nextStepBits) {
    var nextStep = currStepBits - nextStepBits;
    signal input ys[<%- starkStruct.steps[0].nBits %>];
    signal input {maxNum} challenges5[3];
    signal input {maxNum} challenges6[3];
    signal input {maxNum} challenges7[3];
    signal input {maxNum} evals[<%- starkInfo.evMap.length %>][3];
    signal input {maxNum} tree1[<%- starkInfo.mapSectionsN.cm1_2ns %>];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    signal input {maxNum} tree2[<%- starkInfo.mapSectionsN.cm2_2ns %>];
<% }                                         -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { %>
    signal input {maxNum} tree3[<%- starkInfo.mapSectionsN.cm3_2ns %>];
<% }                                         -%>
    signal input {maxNum} tree4[<%- starkInfo.mapSectionsN.cm4_2ns %>];
    signal input {maxNum} consts[<%- starkInfo.nConstants %>];
    signal input {maxNum} s1_vals[1 << nextStep][3];
    signal input enable;

    var p = 0xFFFFFFFF00000001;

    // Map the s0_vals so that they are converted either into single vars (if they belong to base field) or arrays of 3 elements (if 
    // they belong to the extended field). 
    component mapValues = MapValues();
    mapValues.vals1 <== tree1;
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    mapValues.vals2 <== tree2;
<% }                                         -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    mapValues.vals3 <== tree3;
<% }                                         -%>
    mapValues.vals4 <== tree4;

    signal {maxNum} xacc[<%- starkStruct.steps[0].nBits -1 %>];
    xacc.maxNum = p - 1;

    signal {maxNum} ina;
    signal {maxNum} inb;
    ina.maxNum = p - 1;
    inb.maxNum = p - 1;

    signal {maxNum} inp[<%- starkStruct.steps[0].nBits -1 %>];
    inp.maxNum = p - 1;

    for (var i=1; i<<%- starkStruct.steps[0].nBits %>; i++ ) {
        if(i==1) {
        ina <== ys[0]*<%- F.shift * F.w[starkStruct.steps[0].nBits] - F.shift %> + <%- F.shift %>;
        inb <==  ys[1]*(<%- F.w[starkStruct.steps[0].nBits - 1] %> - 1) +1;
        xacc[i-1] <== GLMul(64)(ina,inb);
        } else {
        inp[i - 2] <== ys[i]*(roots(<%- starkStruct.steps[0].nBits %> - i) - 1) +1;
        xacc[i-1] <== GLMul(64)(xacc[i-2], inp[i-2]);
        }
    }

    signal {maxNum} X[3];
<% if (starkStruct.steps[0].nBits>1) {  -%>
    X.maxNum = xacc.maxNum;
    X <== [xacc[<%- starkStruct.steps[0].nBits -2 %>], 0, 0];
<% } else {                             -%>
    X.maxNum = p - 1;
    X <== [ys[0]*(<%- F.shift %> * roots(<%- starkStruct.steps[0].nBits %>)-<%- F.shift %>) + <%- F.shift %>, 0, 0];
<% }                                    -%>

    signal {maxNum} den1[3] <== GLCSub()(X, challenges7);
<%  const maxQuotientBitsDen1 = (18446744069414584320n + val(ch, true)).toString(2).length + 2; -%>
    signal {maxNum} den1inv[3] <== GLCInv(<%- maxQuotientBitsDen1 %>)(den1);
    signal {maxNum} xDivXSubXi[3] <== GLCMul(66)(den1inv, X);
    
    signal {maxNum} rootWXi[3];
    rootWXi.maxNum = roots(<%- starkStruct.nBits %>);
    rootWXi <== [roots(<%- starkStruct.nBits %>), 0, 0];
<%  const maxQuotientwXi = mulValuesBits({}, ch); -%>
    signal {maxNum} wXi[3] <== GLCMul(<%- maxQuotientwXi %>)(challenges7, rootWXi);
    signal {maxNum} den2[3] <== GLCSub()(X, wXi);
<%  const maxQuotientBitsDen2 = (18446744069414584320n + val(ch, true)).toString(2).length + 2; -%>
    signal {maxNum} den2inv[3] <== GLCInv(<%- maxQuotientBitsDen2 %>)(den2);
    signal {maxNum} xDivXSubWXi[3] <== GLCMul(66)(den2inv, X);
   
<% const evalQ = unrollCode(starkInfo.verifierQueryCode.first) -%>

    var s0_keys_lowValues[nextStep];
    for(var i = 0; i < nextStep; i++) {
        s0_keys_lowValues[i] = ys[i + nextStepBits];
    } 
   
    signal {maxNum} lowValues[3] <== TreeSelector(nextStep, 3)(s1_vals, s0_keys_lowValues);

    signal {maxNum} vals[3] <== GLCSub()(<%- evalQ %>, lowValues);
<%  const maxQuotientBitsQ = (maxValues[evalQ] + 18446744069414584321n).toString(2).length + 2; -%>
    signal {maxNum} normC[3] <== GLCNorm(<%- maxQuotientBitsQ %>)(vals);
    
    enable * normC[0] === 0;
    enable * normC[1] === 0;
    enable * normC[2] === 0;
}

// Polynomials can either have dimension 1 (if they are defined in the base field) or dimension 3 (if they are defined in the 
// extended field). In general, all initial polynomials (constants and tr) will have dim 1 and the other ones such as Z (grand product),
// Q (quotient) or h_i (plookup) will have dim 3.
// This function processes the values, which are stored in an array vals[n] and splits them in multiple signals of size 1 (vals_i) 
// or 3 (vals_i[3]) depending on its dimension.
template MapValues() {
    signal input {maxNum} vals1[<%- starkInfo.mapSectionsN.cm1_2ns %>];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    signal input {maxNum} vals2[<%- starkInfo.mapSectionsN.cm2_2ns %>];
<% }                                         -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    signal input {maxNum} vals3[<%- starkInfo.mapSectionsN.cm3_2ns %>];
<% }                                         -%>
    signal input {maxNum} vals4[<%- starkInfo.mapSectionsN.cm4_2ns  %>];

<% const sNames = [null, "cm1_2ns", "cm2_2ns", "cm3_2ns", "cm4_2ns"];              -%>
<% for (let t = 1; t<=4; t++) {                                                  -%>
<%      for (let i=0; i< starkInfo.mapSections[sNames[t]].length; i++) {        -%>
<%          const p = starkInfo.varPolMap[starkInfo.mapSections[sNames[t]][i]];  -%>
<%          if (p.dim == 1) {                                                    -%>
    signal output {maxNum} tree<%- t %>_<%- i %>;
<%          } else if (p.dim == 3) {                                             -%>
    signal output {maxNum} tree<%- t %>_<%- i %>[3];
<%          } else throw new Error("Invalid dim")                                -%>
<%      }                                                                        -%>
<% }                                                                             -%>

    var p = 0xFFFFFFFF00000001;

<% for (let t = 1; t<=4; t++) {                                                   -%>
<%      for (let i=0; i< starkInfo.mapSections[sNames[t]].length; i++) {        -%>
<%          const p = starkInfo.varPolMap[starkInfo.mapSections[sNames[t]][i]];  -%>
<%          if (p.dim == 1) {                                                    -%>
    tree<%- t %>_<%- i %> <== GLCopy()(vals<%- t %>[<%- p.sectionPos %>]);
<%          } else if (p.dim == 3) {                                             -%>
    tree<%- t %>_<%- i %>.maxNum = p - 1;
    tree<%- t %>_<%- i %> <== [vals<%- t %>[<%- p.sectionPos %>],vals<%- t %>[<%- p.sectionPos + 1 %>] , vals<%- t %>[<%- p.sectionPos + 2 %>]];
<%          } else throw new Error("Invalid dim")                                -%>
<%      }                                                                        -%>
<% }                                                                             -%>
}

template parallel VerifyFinalPol() {
    ///////
    // Check Degree last pol
    ///////
    signal input {maxNum} finalPol[<%- 1 << starkStruct.steps[starkStruct.steps.length-1].nBits %>][3];
    signal input enable;

<% const nLastBits = starkStruct.steps[ starkStruct.steps.length-1].nBits;  -%>
<% console.log("NLastBits", nLastBits); -%>
<% const maxDegBits =  Math.max(nLastBits -  (starkStruct.nBitsExt - starkStruct.nBits), 0); -%>
<% console.log("MaxDegBits", maxDegBits); -%>
    // Calculate the IFFT to get the coefficients of finalPol 
    signal lastIFFT[<%- 1 << nLastBits %>][3] <== FFT(<%- nLastBits %>, 1)(finalPol);

    // Check that the degree of the final polynomial is bounded by the degree defined in the last step of the folding
    // This means ?????? in terms of IFFT
    for (var k= <%- 1 << maxDegBits %>; k< <%- 1 << nLastBits %>; k++) {
        for (var e=0; e<3; e++) {
            enable * lastIFFT[k][e] === 0;
        }
    }

    // The coefficients of lower degree can have any value
    for (var k= 0; k < <%- 1 << maxDegBits %>; k++) {
        _ <== lastIFFT[k];
    }
}

template StarkVerifier() {
    signal input publics[<%- pil.publics.length %>]; // constant polynomials
    signal input root1; // Merkle tree root of the evaluations of all trace polynomials
    signal input root2; // Merkle tree root of the evaluations of polynomials h1 and h2 used for the plookup
    signal input root3; // Merkle tree root of the evaluations of the grand product polynomials (Z) 
    signal input root4; // Merkle tree root of the evaluations of the quotient Q1 and Q2 polynomials

    // Notice that root2 and root3 can be zero depending on the STARK being verified 

<% if (options.verkeyInput) {  -%>
<% /* Depending on the STARK being verified, the rootC will be hardcoded or passed as an input */%>
    signal input rootC; // Merkle tree root of the evaluations of constant polynomials
<% } else { -%>
    signal rootC <== <%- constRoot %>; // Merkle tree root of the evaluations of constant polynomials
<% } -%>

    signal input evals[<%- starkInfo.evMap.length %>][3]; // Evaluations of the set polynomials at a challenge value z and gz

    // Leaves values of the merkle tree used to check all the queries
    signal input s0_vals1[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm1_2ns %>];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { %>
    signal input s0_vals2[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm2_2ns %>];
<% }                                         -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    signal input s0_vals3[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm3_2ns %>];
<% }                                         -%>
    signal input s0_vals4[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm4_2ns %>];
    signal input s0_valsC[<%- starkStruct.nQueries %>][<%- starkInfo.nConstants%>];
    
    // Merkle proofs for each of the evaluations
    signal input s0_siblings1[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[0].nBits - 1)/4)+1 %>][16];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    signal input s0_siblings2[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[0].nBits - 1)/4)+1 %>][16];
<% }                                         -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    signal input s0_siblings3[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[0].nBits - 1)/4)+1 %>][16];
<% }                                         -%>
    signal input s0_siblings4[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[0].nBits - 1)/4)+1 %>][16];
    signal input s0_siblingsC[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[0].nBits - 1)/4)+1 %>][16];

    // Contains the root of the original polynomial and all the intermediate FRI polynomials except for the last step
<% let si_roots = []; -%>
<% for (let s=1; s<starkStruct.steps.length; s++) {   -%>
<% si_roots.push(`s${s}_root`); -%>
    signal input s<%- s %>_root;
<% }                                                     -%>

    // For each intermediate FRI polynomial and the last one, we store at vals the values needed to check the queries.
    // Given a query r,  the verifier needs b points to check it out, being b = 2^u, where u is the difference between two consecutive step
    // and the sibling paths for each query.
<% for (let s=1; s<starkStruct.steps.length; s++) {   -%>
    signal input s<%- s %>_vals[<%- starkStruct.nQueries %>][<%- (1 << (starkStruct.steps[s-1].nBits - starkStruct.steps[s].nBits))*3 %>];
    signal input s<%- s %>_siblings[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[s].nBits -1) /4) +1 %>][16];
<% }                                                  -%>

    // Evaluations of the final FRI polynomial over a set of points of size bounded its degree
    signal input finalPol[<%- 1 << starkStruct.steps[starkStruct.steps.length-1].nBits %>][3];

<% if (options.enableInput) { -%>
    signal input enable;
    enable * (enable -1 ) === 0;
<% } else { -%>
    signal enable;
    enable <== 1;
<% } -%>

    signal {maxNum} publicsGL[<%- pil.publics.length %>]; 
    for(var i = 0; i < <%- starkInfo.nPublics %>; i++){
        publicsGL[i] <== LessThanGoldilocks()(publics[i]);
    }

    signal {maxNum} evalsGL[<%- starkInfo.evMap.length %>][3];
    for(var i = 0; i < <%- starkInfo.evMap.length %>; i++){
        for(var j = 0; j < 3; j++) {
            evalsGL[i][j] <== LessThanGoldilocks()(evals[i][j]);
        }
    }

    signal {maxNum} s0_valsCGL[<%- starkStruct.nQueries %>][<%- starkInfo.nConstants%>];
    signal {maxNum} s0_vals1GL[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm1_2ns %>];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    signal {maxNum} s0_vals2GL[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm2_2ns %>];
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    signal {maxNum} s0_vals3GL[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm3_2ns %>];
<% } -%>
    signal {maxNum} s0_vals4GL[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm4_2ns %>];
<% for (let s=1; s<starkStruct.steps.length; s++) {   -%>
    signal {maxNum} s<%- s %>_valsGL[<%- starkStruct.nQueries %>][<%- (1 << (starkStruct.steps[s-1].nBits - starkStruct.steps[s].nBits))*3 %>];
<% }                                                  -%>
    for(var i = 0; i < <%- starkStruct.nQueries %>; i++){
        for(var j = 0; j < <%- starkInfo.nConstants %>; j++) {
            s0_valsCGL[i][j] <== LessThanGoldilocks()(s0_valsC[i][j]);
        }

        for(var j = 0; j < <%- starkInfo.mapSectionsN.cm1_2ns %>; j++) {
            s0_vals1GL[i][j] <== LessThanGoldilocks()(s0_vals1[i][j]);
        }

<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
        for(var j = 0; j < <%- starkInfo.mapSectionsN.cm2_2ns %>; j++) {
            s0_vals2GL[i][j] <== LessThanGoldilocks()(s0_vals2[i][j]);
        }
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
        for(var j = 0; j < <%- starkInfo.mapSectionsN.cm3_2ns %>; j++) {
            s0_vals3GL[i][j] <== LessThanGoldilocks()(s0_vals3[i][j]);
        }
<% } -%>

        for(var j = 0; j < <%- starkInfo.mapSectionsN.cm4_2ns %>; j++) {
            s0_vals4GL[i][j] <== LessThanGoldilocks()(s0_vals4[i][j]);
        }

<% for (let s=1; s<starkStruct.steps.length; s++) {   -%>
        for(var j = 0; j < <%- (1 << (starkStruct.steps[s-1].nBits - starkStruct.steps[s].nBits))*3 %>; j++) {
            s<%- s %>_valsGL[i][j] <== LessThanGoldilocks()(s<%- s %>_vals[i][j]);
        }
<% }                                                  -%>
    }

    signal {maxNum} finalPolGL[<%- 1 << starkStruct.steps[starkStruct.steps.length-1].nBits %>][3];
    for(var i = 0; i < <%- 1 << starkStruct.steps[starkStruct.steps.length-1].nBits %>; i++){
        for(var j = 0; j < 3; j++) {
            finalPolGL[i][j] <== LessThanGoldilocks()(finalPol[i][j]);
        }
    }

    // Each STARK proof requires 8 challenges (and remember that each challenge has the form a + bx + cx^2)
    // Challenge 0 && 1 -> Used to reduce vector lookups and vector permutations (uses a initial seed + root committed in round 1)
    // Challenge 2 && 3 -> Used to compute grand-product polynomials (uses previous output + root committed in round 2)
    // Challenge 4 -> Used to compute the quotient polynomial (uses previous output + root committed in round 3)
    // Challenge 7 -> Used to compute the evaluation challenge z (uses previous output + root committed in round 4)
    // Challenge 5 + 6 -> Used to compute combination challenge required for FRI (uses the evaluations values. 
    // Remember that each evaluation has three values since we are in an extended field GF(p^3))
    signal {maxNum} challenges[8][3];

    //(s_i)_special contains the random value provided by the verifier at each step of the folding so that 
    // the prover can commit the polynomial.
    // Remember that, when folding, the prover does as follows: f0 = g_0 + X*g_1 + ... + (X^b)*g_b and then the 
    // verifier provides a random X so that the prover can commit it. This value is stored here.
<% let si_specials = []; -%>
<% for (let s=0; s<starkStruct.steps.length; s++) {   -%>
    signal {maxNum} s<%- s %>_specialX[3];
<% si_specials.push(`s${s}_specialX`); -%>
<% }                                                    -%>
    
    // Each of the queries values represented in binary
    signal ys[<%- starkStruct.nQueries %>][<%- starkStruct.steps[0].nBits %>];

    ///////////
    // Calculate challenges, s_i special and queries
    ///////////

    (challenges,ys,<%- si_specials.join(",") %>) <== Transcript()(publicsGL,rootC,root1,root2,root3,root4,evalsGL, <%- si_roots.join(",") %>,finalPolGL);

    ///////////
    // Check constraints polynomial in the evaluation point
    ///////////

<%  const challengesEvaluations = ["challenges[2]", "challenges[3]", "challenges[4]", "challenges[7]"];
    if (starkInfo.mapSectionsN.cm2_2ns > 0) { 
        challengesEvaluations.unshift(...["challenges[0]", "challenges[1]"]);
    }
-%> 
    VerifyEvaluations()(<%- challengesEvaluations.join(", ") %>, evalsGL, publicsGL, enable);

    ///////////
    // Preprocess s_i vals
    ///////////

    // Preprocess the s_i vals given as inputs so that we can use anonymous components.
    // Two different processings are done:
    // For s0_vals, the arrays are transposed so that they fit MerkleHash template
    // For (s_i)_vals, the values are passed all together in a single array of length nVals*3. We convert them to vals[nVals][3]
    
    signal {maxNum} s0_vals1_p[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm1_2ns %>][1];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    signal {maxNum} s0_vals2_p[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm2_2ns %>][1];
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    signal {maxNum} s0_vals3_p[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm3_2ns %>][1];
<% } -%>
    signal {maxNum} s0_vals4_p[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm4_2ns %>][1];
    signal {maxNum} s0_valsC_p[<%- starkStruct.nQueries %>][<%- starkInfo.nConstants %>][1];
<% for (let s=1; s<starkStruct.steps.length; s++) {   -%>
    signal {maxNum} s<%- s %>_vals_p[<%- starkStruct.nQueries %>][<%- (1 << (starkStruct.steps[s-1].nBits - starkStruct.steps[s].nBits)) %>][3]; 
<% } -%>

    for (var q=0; q<<%- starkStruct.nQueries %>; q++) {
        // Preprocess vals for the initial FRI polynomial
        for (var i = 0; i < <%- starkInfo.mapSectionsN.cm1_2ns %>; i++) {
            s0_vals1_p[q][i][0] <== GLCopy()(s0_vals1GL[q][i]);
        }
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
        for (var i = 0; i < <%- starkInfo.mapSectionsN.cm2_2ns %>; i++) {
            s0_vals2_p[q][i][0] <== GLCopy()(s0_vals2GL[q][i]);
        }
<% } -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
        for (var i = 0; i < <%- starkInfo.mapSectionsN.cm3_2ns %>; i++) {
            s0_vals3_p[q][i][0] <== GLCopy()(s0_vals3GL[q][i]);
        }
<% } -%>
        for (var i = 0; i < <%- starkInfo.mapSectionsN.cm4_2ns %>; i++) {
            s0_vals4_p[q][i][0] <== GLCopy()(s0_vals4GL[q][i]);
        }
        for (var i = 0; i < <%- starkInfo.nConstants %>; i++) {
            s0_valsC_p[q][i][0] <== GLCopy()(s0_valsCGL[q][i]);
        }

        // Preprocess vals for each folded polynomial
        for(var e=0; e < 3; e++) {
<% for (let s=1; s<starkStruct.steps.length; s++) {   -%>
            for(var c=0; c < <%- (1 << (starkStruct.steps[s-1].nBits - starkStruct.steps[s].nBits))%>; c++) {
                s<%- s %>_vals_p[q][c][e] <== GLCopy()(s<%- s %>_valsGL[q][c*3+e]);
            }
<% } -%>
        }
    }
    
    ///////////
    // Verify Merkle roots
    ///////////
        
    //Calculate merkle root for s0 vals
    for (var q=0; q<<%- starkStruct.nQueries %>; q++) {
        VerifyMerkleHash(1, <%- starkInfo.mapSectionsN.cm1_2ns %>, <%- 1 << starkStruct.steps[0].nBits %>)(s0_vals1_p[q], s0_siblings1[q], ys[q], root1, enable);
    }
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    for (var q=0; q<<%- starkStruct.nQueries %>; q++) {
        VerifyMerkleHash(1, <%- starkInfo.mapSectionsN.cm2_2ns %>, <%- 1 << starkStruct.steps[0].nBits %>)(s0_vals2_p[q], s0_siblings2[q], ys[q], root2, enable);
    }
<% }                                        -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    for (var q=0; q<<%- starkStruct.nQueries %>; q++) {
        VerifyMerkleHash(1, <%- starkInfo.mapSectionsN.cm3_2ns %>, <%- 1 << starkStruct.steps[0].nBits %>)(s0_vals3_p[q], s0_siblings3[q], ys[q], root3, enable);
    }
<% }     -%>
    for (var q=0; q<<%- starkStruct.nQueries %>; q++) {
        VerifyMerkleHash(1, <%- starkInfo.mapSectionsN.cm4_2ns %>, <%- 1 << starkStruct.steps[0].nBits %>)(s0_vals4_p[q], s0_siblings4[q], ys[q], root4, enable);
    }

    for (var q=0; q<<%- starkStruct.nQueries %>; q++) {
        VerifyMerkleHash(1, <%- starkInfo.nConstants %>, <%- 1 << starkStruct.steps[0].nBits %>)(s0_valsC_p[q], s0_siblingsC[q], ys[q], rootC, enable);  
    }                                  

<% for (let s=1; s<starkStruct.steps.length; s++) {   -%>
    signal s<%- s %>_keys_merkle[<%- starkStruct.nQueries %>][<%- starkStruct.steps[s].nBits %>];
    for (var q=0; q<<%- starkStruct.nQueries %>; q++) {
        // Calculate merkle root for s<%- s %> vals
        for(var i = 0; i < <%-starkStruct.steps[s].nBits %>; i++) { s<%- s %>_keys_merkle[q][i] <== ys[q][i]; }
        VerifyMerkleHash(3, <%- 1 << (starkStruct.steps[s-1].nBits - starkStruct.steps[s].nBits) %>, <%- 1 << starkStruct.steps[s].nBits %>)(s<%- s %>_vals_p[q], s<%- s %>_siblings[q], s<%- s %>_keys_merkle[q], s<%- s %>_root, enable);
    }
<% } -%>

    ///////////
    // Verify FRI query
    ///////////

    // After checking that all merkle roots are properly built, the query and the intermediate 
    // polynomials need to be verified 
    for (var q=0; q<<%- starkStruct.nQueries %>; q++) {
<%  let nextValsPol = 0 < starkStruct.steps.length-1 ? "s1_vals_p[q]" : "finalPolGL"; 
    let nextStep = 0 < starkStruct.steps.length-1 ? starkStruct.steps[1].nBits : 0; 
    let queryVals = ["s0_vals1GL[q]"];
    if(starkInfo.mapSectionsN.cm2_2ns > 0) {
        queryVals.push("s0_vals2GL[q]");
    }
    if(starkInfo.mapSectionsN.cm3_2ns > 0) {
        queryVals.push("s0_vals3GL[q]");
    }
    queryVals.push("s0_vals4GL[q]");
    queryVals.push("s0_valsCGL[q]");
-%>
        // Verify that the query is properly constructed. This is done by checking that the linear combination of the set of 
        // polynomials committed during the different rounds evaluated at z matches with the commitment of the FRI polynomial (unsure)
        VerifyQuery(<%- starkStruct.steps[0].nBits %>, <%- nextStep %>)(ys[q], challenges[5], challenges[6], challenges[7], evalsGL, <%- queryVals.join(", ") %>, <%- nextValsPol %>, enable);

        ///////////
        // Verify FRI construction
        ///////////

        // For each folding level we need to check that the polynomial is properly constructed
        // Remember that if the step between polynomials is b = 2^l, the next polynomial p_(i+1) will have degree deg(p_i) / b
<% for (let s=1; s<starkStruct.steps.length; s++) {   -%>
<%
    const e1 = F.inv( F.mul(
        F.exp(F.shift, 1 << (starkStruct.nBitsExt -starkStruct.steps[s-1].nBits) ),
        F.w[starkStruct.steps[s-1].nBits]
    ));
    const e0 = F.inv(F.exp(F.shift, 1 << (starkStruct.nBitsExt -starkStruct.steps[s-1].nBits) ) );
-%>

        // Check S<%- s %> 
        var s<%- s %>_ys[<%- starkStruct.steps[s].nBits%>];
        for(var i = 0; i < <%- starkStruct.steps[s].nBits%>; i++) { s<%- s %>_ys[i] = ys[q][i]; } 
<%  const nextPolFRI = s < starkStruct.steps.length-1 ? `s${s+1}_vals_p[q]` : "finalPolGL"; -%>
<%  const nextStepFRI = s < starkStruct.steps.length-1 ? starkStruct.steps[s+1].nBits : 0; -%>
        VerifyFRI(<%- starkStruct.steps[s-1].nBits %>, <%- starkStruct.steps[s].nBits %>, <%- nextStepFRI %>, <%- e0 %>, <%- e1 %>)(s<%- s %>_ys, s<%- s %>_specialX, s<%- s %>_vals_p[q], <%- nextPolFRI %>, enable);
<% } -%>
    }

    VerifyFinalPol()(finalPolGL, enable);
}

<% if (!options.skipMain) {  -%>

template Main() {
    signal input proverAddr;
    signal output publicsHash;

    signal input publics[<%- pil.publics.length %>];
    signal input root1;
    signal input root2;
    signal input root3;
    signal input root4;
    signal input evals[<%- starkInfo.evMap.length %>][3];

   // Leaves values of the merkle tree used to check all the queries
   signal input s0_vals1[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm1_2ns %>];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { %>
    signal input s0_vals2[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm2_2ns %>];
<% }                                         -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    signal input s0_vals3[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm3_2ns %>];
<% }                                         -%>
    signal input s0_vals4[<%- starkStruct.nQueries %>][<%- starkInfo.mapSectionsN.cm4_2ns %>];
    signal input s0_valsC[<%- starkStruct.nQueries %>][<%- starkInfo.nConstants%>];
    signal input s0_siblings1[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[0].nBits - 1)/4)+1 %>][16];
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    signal input s0_siblings2[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[0].nBits - 1)/4)+1 %>][16];
<% }                                         -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    signal input s0_siblings3[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[0].nBits - 1)/4)+1 %>][16];
<% }                                         -%>
    signal input s0_siblings4[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[0].nBits - 1)/4)+1 %>][16];
    signal input s0_siblingsC[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[0].nBits - 1)/4)+1 %>][16];

<% for (let s=0; s<starkStruct.steps.length-1; s++) {   -%>
    signal input s<%- s+1 %>_root;
<% }                                                     -%>

    // For each intermediate FRI polynomial and the last one, we store at vals the values needed to check the queries.
    // Given a query r,  the verifier needs b points to check it out, being b = 2^u, where u is the difference between two consecutive step
    // and the sibling paths for each query.
<% for (let s=1; s<starkStruct.steps.length; s++) {   -%>
    signal input s<%- s %>_vals[<%- starkStruct.nQueries %>][<%- (1 << (starkStruct.steps[s-1].nBits - starkStruct.steps[s].nBits))*3 %>];
    signal input s<%- s %>_siblings[<%- starkStruct.nQueries %>][<%- Math.floor((starkStruct.steps[s].nBits -1) /4) +1 %>][16];
<% }                                                  -%>

    signal input finalPol[<%- 1 << starkStruct.steps[starkStruct.steps.length-1].nBits %>][3];


    component sv = StarkVerifier();

    sv.publics <== publics;
    sv.root1 <== root1;
    sv.root2 <== root2;
    sv.root3 <== root3;
    sv.root4 <== root4;
    sv.evals <== evals;


    sv.s0_vals1 <== s0_vals1;
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    sv.s0_vals2 <== s0_vals2;
<% }                                         -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    sv.s0_vals3 <== s0_vals3;
<% }                                         -%>
    sv.s0_vals4 <== s0_vals4;
    sv.s0_valsC <== s0_valsC;
    sv.s0_siblings1 <== s0_siblings1;
<% if (starkInfo.mapSectionsN.cm2_2ns > 0) { -%>
    sv.s0_siblings2 <== s0_siblings2;
<% }                                         -%>
<% if (starkInfo.mapSectionsN.cm3_2ns > 0) { -%>
    sv.s0_siblings3 <== s0_siblings3;
<% }                                         -%>
    sv.s0_siblings4 <== s0_siblings4;
    sv.s0_siblingsC <== s0_siblingsC;

<% for (let s=0; s<starkStruct.steps.length-1; s++) {   -%>
    sv.s<%- s+1 %>_root <== s<%- s+1 %>_root;
<% }                                                     -%>

<% for (let s=1; s<starkStruct.steps.length; s++) {   -%>
    sv.s<%- s %>_vals <== s<%- s %>_vals;
    sv.s<%- s %>_siblings <== s<%- s %>_siblings;
<% }                                                  -%>
    sv.finalPol <== finalPol;

    //////
    // Calculate Publics Hash
    //////

    component publicsHasher = Sha256(<%- 160 + 64*pil.publics.length %>);
    component n2bProverAddr = Num2Bits(160);
    component n2bPublics[<%- pil.publics.length %> ];
    component cmpPublics[<%- pil.publics.length %> ];

    n2bProverAddr.in <== proverAddr;
    for (var i=0; i<160; i++) {
        publicsHasher.in[160 - 1 -i] <== n2bProverAddr.out[i];
    }

    var offset = 160;

    for (var i=0; i<<%- pil.publics.length %>; i++) {
        n2bPublics[i] = Num2Bits(64);
        cmpPublics[i] = CompConstant64(0xFFFFFFFF00000000);
        n2bPublics[i].in <== publics[i];
        for (var j=0; j<64; j++) {
            publicsHasher.in[offset + 64 - 1 -j] <== n2bPublics[i].out[j];
            cmpPublics[i].in[j] <== n2bPublics[i].out[j];
        }
        cmpPublics[i].out === 0;
        offset += 64;
    }

    component n2bPublicsHash = Bits2Num(256);
    for (var i = 0; i < 256; i++) {
        n2bPublicsHash.in[i] <== publicsHasher.out[255-i];
    }

    publicsHash <== n2bPublicsHash.out;
}

component main = Main();
<% } -%>

