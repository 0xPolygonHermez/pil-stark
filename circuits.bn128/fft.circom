pragma circom 2.1.0;

include "gl.circom";
include "bitify.circom";


function roots(i) {
    var roots[33] = [
        1,
        18446744069414584320,
        281474976710656,
        16777216,
        4096,
        64,
        8,
        2198989700608,
        4404853092538523347,
        6434636298004421797,
        4255134452441852017,
        9113133275150391358,
        4355325209153869931,
        4308460244895131701,
        7126024226993609386,
        1873558160482552414,
        8167150655112846419,
        5718075921287398682,
        3411401055030829696,
        8982441859486529725,
        1971462654193939361,
        6553637399136210105,
        8124823329697072476,
        5936499541590631774,
        2709866199236980323,
        8877499657461974390,
        3757607247483852735,
        4969973714567017225,
        2147253751702802259,
        2530564950562219707,
        1905180297017055339,
        3524815499551269279,
        7277203076849721926
    ];
    return roots[i];
}

function invroots(i) {
    var invroots[33] = [
        1,
        18446744069414584320,
        18446462594437873665,
        18446742969902956801,
        18442240469788262401,
        18158513693329981441,
        16140901060737761281,
        274873712576,
        9171943329124577373,
        5464760906092500108,
        4088309022520035137,
        6141391951880571024,
        386651765402340522,
        11575992183625933494,
        2841727033376697931,
        8892493137794983311,
        9071788333329385449,
        15139302138664925958,
        14996013474702747840,
        5708508531096855759,
        6451340039662992847,
        5102364342718059185,
        10420286214021487819,
        13945510089405579673,
        17538441494603169704,
        16784649996768716373,
        8974194941257008806,
        16194875529212099076,
        5506647088734794298,
        7731871677141058814,
        16558868196663692994,
        9896756522253134970,
        1644488454024429189
    ];
    return invroots[i];
}

template FFT(nBits, inv) {

    var p = 0xFFFFFFFF00000001;
    var N = 1<<nBits;

    signal input in[N][3];
    signal output out[N][3];

    signal k[N][3];

    var w;
    var ws[N];
    if (inv) {
        w = invroots(nBits);
        ws[0] = _inv1(N);
    } else {
        w = roots(nBits);
        ws[0] = 1;
    }
    for (var i=1; i<N; i++) {
        ws[i] = ( ws[i-1] * w ) % p;
    }

    var sum[N][3];
    for (var i=0; i<N; i++) {
        for (var e=0; e<3; e++) {
            sum[i][e] = 0;
            for (var j=0; j<N; j++) {
                sum[i][e] = sum[i][e] + ws[(i*j)%N]* in[j][e];
            }
        }
    }

    component n2bK[N][3];
    component n2bO[N][3];
    for (var i=0; i<N; i++) {
        for (var e=0; e<3; e++) {
            k[i][e] <-- sum[i][e] \ p;
            out[i][e] <-- sum[i][e] % p;

            k[i][e]*p + out[i][e] === sum[i][e];

            n2bK[i][e] = Num2Bits(64+nBits+1);
            n2bK[i][e].in <== k[i][e];
            _ <== n2bK[i][e].out;

            n2bO[i][e] = Num2Bits(64);
            n2bO[i][e].in <== out[i][e];
	        _ <== n2bO[i][e].out;
        }
    }
}
